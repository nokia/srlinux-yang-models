module srl_nokia-snmp {
  yang-version 1.1;

  // namespace

  namespace "urn:srl_nokia/snmp";
  prefix srl_nokia-snmp;

  import srl_nokia-system {
    prefix srl-system;
  }
  import srl_nokia-network-instance {
    prefix srl-netinst;
  }
  import srl_nokia-common {
    prefix srl-comm;
  }
  import srl_nokia-features {
    prefix srl_nokia-feat;
  }
  import srl_nokia-extensions {
    prefix srl-ext;
  }

  organization
    "Nokia";
  contact
    "Nokia SR Linux Support
     Web: <http://www.nokia.com>";

  description
    "This module defines SNMP configuration and state";

  revision 2023-07-31 {
    description
      "SRLinux 23.7.1";
  }
  revision 2021-11-30 {
    description
      "SRLinux 21.11.1";
  }
  revision 2021-03-31 {
    description
      "SRLinux 21.3.1";
  }
  revision 2020-06-30 {
    description
      "SRLinux 20.6.1";
  }
  revision 2019-11-30 {
    description
      "SRLinux 19.11.1";
  }

  typedef snmp-version {
    type enumeration {
      enum v1 {
        description
          "Version v1 of SNMP";
      }
      enum v2c {
        description
          "Version v2c of SNMP";
      }
      enum both {
        description
          "Version v1 and v2c of SNMP";
      }
    }
    description
      "Version of SNMP for the SNMP server to use";
  }

  typedef community-permission {
    type enumeration {
      enum r {
        description
          "Permit read only access for this community";
      }
    }
    description
      "Permission to apply to this community";
  }

  typedef engine-id {
    type srl-comm:hex-string {
      pattern '([0-9a-fA-F]){2}(:([0-9a-fA-F]){2}){4,31}';
    }
    description
      "The engine ID specified as a list of colon-specified
      hexadecimal octets, e.g., '80:00:02:b8:04:61:62:63'.";
    reference
      "RFC 3411: An Architecture for Describing Simple Network
         Management Protocol (SNMP) Management Frameworks";
  }

  typedef auth-protocol {
    type enumeration {
      enum MD5;
      enum SHA;
      enum SHA-224;
      enum SHA-256;
      enum SHA-384;
      enum SHA-512;
    }
    description
      "Authentication protocol used for authenticated SNMPv3 messages";
  }

  typedef priv-protocol {
    type enumeration {
      enum DES;
      enum AES;
    }
    description
      "Privacy protocol used for encrypted SNMPv3 messages";
  }

  typedef security-level {
    type enumeration {
      enum no-auth-no-priv;
      enum auth-no-priv;
      enum auth-priv;
    }
    description
      "Security level used for SNMPv3 messages";
  }

  typedef mibs {
    type enumeration {
      enum system;
      enum interfaces;
      enum timetra-bgp-mib;
      enum timetra-chassis-mib;
    }
    description
      "SNMP MIB tables that can be accessed";
  }

  grouping community-entry { // new version, used when snmp-v3 is enabled
    leaf id {
      type uint32;
      description
          "Unique identifier for the SNMP community.";
    }
    leaf description {
      type srl-comm:description;
      description
        "Description for the SNMP community";
    }
    leaf name {
      description
        "Name of the SNMP community";
      type srl-comm:name {
        srl-ext:generated-class-name "SecretKey";
      }
      mandatory true;
    }
    leaf permission {
      description
        "Permissions to allocate to this community";
      type community-permission;
      default "r";
    }
    leaf version {
      description
        "SNMP version to use with this community";
      type snmp-version;
      default "both";
    }
    leaf prefix {
      description
        "Prefix where this community can be used.
        
         A /32 or /128 mask can be used to limit it to a single ip-address";
      type srl-comm:ip-prefix;
    }
  }

  grouping community-interface { // new version, used when snmp-v3 is enabled
    list community {
      key "id";
      description
        "List of configured SNMPv1 and v2 communities";
      uses community-entry;
      must "../security-level = 'no-auth-no-priv'" {
        error-message "SNMP communities can only be used in a group when security-level is set to 'no-auth-no-priv'";
      }
    }
  }

  grouping community-interface-nolist { // old version, used when snmp-v3 is not yet enabled
    leaf community {
      type srl-comm:name {
        srl-ext:generated-class-name "SecretKey";
      }
     mandatory true;
    }
  }

  grouping user-entry {
    leaf name {
      description
        "Name of the SNMPv3 user";
      type srl-comm:name;
    }
    leaf description {
      type srl-comm:description;
      description
        "Description for this user";
    }
    container authentication {
      description
        "Authentication parameters for this user.";
      leaf protocol {
        type auth-protocol;
        default MD5;
        description
          "Authentication protocol used by this user.";
      }
      leaf password {
        type string {
          srl-ext:generated-class-name "SecretKey";
          length "8..255";
        }
        mandatory true;
        description
            "The user authentication password, supplied either as cleartext or as a hashed value.

            If provided as cleartext, the system will hash the value on input, storing only the hashed value.
            If provided as a hashed value, the value should include any '$' characters, for example '$ar2$aOvsuj0ALlU=$r750fMa3ZEA/Di8dIfU2fQ=='.";
      }
    }
    container privacy {
      description
        "Privacy parameters for this user.";
      leaf protocol {
        type priv-protocol;
        default DES;
        description
          "Privacy protocol used by this user.";
        //must "not((. = 'none') and (../../../security-level = 'auth-priv'))" {
        //  error-message "SNMPv3 privacy protocol must be enabled in a group when security-level is set to 'auth-priv'";
        //}
      }
      leaf password {
        type string {
          srl-ext:generated-class-name "SecretKey";
          length "8..255";
        }
        description
          "The user privacy password, supplied either as cleartext or as a hashed value. If not provided, authentication/password will be used.

            If provided as cleartext, the system will hash the value on input, storing only the hashed value.
            If provided as a hashed value, the value should include any '$' characters, for example '$ar2$aOvsuj0ALlU=$r750fMa3ZEA/Di8dIfU2fQ=='.";
      }
    }
  }

  grouping user-interface {
    list user {
      key "name";
      description
        "List of configured SNMPv3 users";
      uses user-entry;
    }
  }

  grouping view-interface {
    leaf-list access-views-readonly {
      type mibs;
      ordered-by system;
      description
        "List of SNMP MIBs that can be accessed by this group.";
      min-elements 1;
    }
  }

  grouping group-entry {
    leaf name {
      type srl-comm:name;
      description
        "Name of the SNMP access-group";
    }
    leaf description {
      type srl-comm:description;
      description
        "Description for this group";
    }
    uses community-interface;
    uses user-interface;
    leaf security-level {
      type security-level;
      mandatory true;
      description
        "Minimum security level required for this group.";
    }
    uses view-interface;
  }

  grouping group-interface {
    list group {
      if-feature "srl_nokia-feat:snmp-v3";
      description
        "List of configured SNMP access-groups";
      key "name";
      uses group-entry;
    }
  }

  grouping network-instance-entry-config {
    leaf admin-state {
      type srl-comm:admin-state;
      description
        "Enables the SNMP server in this network-instance";
    }
    leaf-list source-address {
      type srl-comm:ip-address;
      default "::";
      description
        "List of IP addresses for the SNMP server to listen on within the network-instance";
    }
    /*leaf-list trace-options {
    description
    "List of enabled trace-options";
        type identityref {
            base srl-snmp-trace:snmp-trace-option;
        }
    }*/
    leaf engine-id {
      if-feature "srl_nokia-feat:snmp-v3";
      type engine-id;
        description
          "The local SNMP engine's administratively assigned unique identifier.

           If this leaf is not set, the device automatically calculates an engine ID,
           as described in RFC 3411.";
    }
  }

  grouping network-instance-entry-state {
    leaf oper-state {
      type srl-comm:oper-state;
      config false;
      description
        "Details the operational state of the SNMP server";
    }
  }

  grouping network-instance-entry {
    leaf name {
      type leafref {
        path "/srl-netinst:network-instance/srl-netinst:name";
      }
      must 'not(/srl-netinst:network-instance[srl-netinst:name=current()]/srl-netinst:type = "srl-netinst:mac-vrf")' {
        error-message "SNMP server cannot be started in a network-instance of type 'mac-vrf'";
      }
      description
        "Reference to a configured network-instance";
    }
    uses network-instance-entry-config;
    uses network-instance-entry-state;
  }

  grouping network-instance-interface {
    list network-instance {
      description
        "List of network-instances to run an SNMP server in";
      key "name";
      uses network-instance-entry;
    }
  }

  grouping snmp-top {
    container snmp {
      description
        "Top-level container for SNMP configuration and state";
      presence "Configure SNMP";
      uses community-interface-nolist; // old version, not for snmp-v3
      uses group-interface; // new version, for snmp-v3
      uses network-instance-interface;
    }
  }

  augment "/srl-system:system" {
    uses snmp-top;
  }
}
