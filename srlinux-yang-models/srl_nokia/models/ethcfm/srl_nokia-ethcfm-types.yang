module srl_nokia-ethcfm-types {
  yang-version 1.1;
  namespace "urn:srl_nokia/ethcfm/types";
  prefix srl_nokia-ethcfm-types;

  description
    "This module defines derived types for configuration and operational state data
     related to Ethernet CFM management.";

  revision 2022-06-30 {
    description
      "SRLinux 22.6.1";
  }
  revision 2022-03-31 {
    description
      "SRLinux 22.3.1";
  }
  revision 2021-11-30 {
    description
      "SRLinux 21.11.1";
  }

  typedef string-not-all-spaces {
    type string {
      pattern '(.*\S.*)|()' {
        error-message "The given string must not be all spaces.";
      }
    }
  }

  typedef admin-name {
    description
      "Used to define a name that can be used to uniquely identify
       an object.  Historically, an arbitrary integer index
       would have been used for this purpose. A string provides
       greater flexibility and allows some amount of context to
       be included.";
    type string-not-all-spaces {
      length "1..64";
      pattern '([1-9]|[1-9][0-9]{1,8}|[1-3][0-9]{9}|4[0-1][0-9]{8}|42[0-8][0-9]{7}|429[0-3][0-9]{6}|4294[0-8][0-9]{5}|42949[0-5][0-9]{4}|429496[0-6][0-9]{3}|4294967[0-1][0-9]{2}|42949672[0-8][0-9]|429496729[0-5])'
            + '|'
            + '([^0-9_ +]\P{C}*[^ ])'
            + '|'
            + '([^0-9_ +])' {
        error-message "The admin name must not contain a leading underscore, space or plus sign and must not contain a trailing space. It can only begin with a number if it is numeric only and within the range 1..4294967295.";
      }
    }
  }

  typedef md-name-type {
    description
      "Maintenance domain name format.";
    type enumeration {
      enum none {
        value 1;
      }
      enum char-string {
        value 4;
      }
    }
  }

  typedef ma-name-type {
    description
      "Maintenance association name format.";
    type enumeration {
      enum char-string {
        value 2;
      }
      enum icc-based {
        value 32;
      }
    }
  }

  typedef mhf-creation-type {
    description
      "Indicates whether the Management Entity can create
       default-domain MHFs.
       The valid values are:
       none(1)      No MHFs can be created for this VID.
       default(2)   MHFs can be created on this VID on any
                   Bridge port through which this VID can
                   pass.
       explicit(3)  MHFs can be created for this VID only on
                   Bridge ports through which this VID can
                   pass, and only if a MEP is created at some
                   lower MD Level.
       defer(4)     The creation of MHFs is determined by the
                   corresponding Default Domain system's
                   mhf-creation value.";
    reference
      "802.1ag clause 12.14.5.1.3:c and 22.2.3";
    type enumeration {
      enum none;
      enum default;
      enum explicit;
      enum defer;
    }
  }

  typedef md-level-type {
    description
      "The Management Point (MP) level.

       Higher numbers correspond to higher Maintenance Domains,
       those with the greatest physical reach, with the highest
       values for customers' CFM packets.  Lower numbers correspond
       to lower Maintenance Domains, those with more limited
       physical reach, with the lowest values for CFM PDUs
       protecting single bridges or physical links.";
    type uint8 {
      range "0..7";
    }
  }

  typedef permission-type {
    description
      "Indicates what, if anything, is to be included in the Sender
       ID TLV transmitted in CCMs, LBMs, LTMs, and LTRs.  The valid
       values are:
       none(1)           The Sender ID TLV is not to be sent.
       chassis(2)        The Chassis ID Length, Chassis ID
                        Subtype, and Chassis ID fields of  the
                        Sender ID TLV are to be sent.
       manage(3)         The Management Address Length and
                        Management Address of the Sender ID TLV
                        are to be sent.
       chassis-manage(4) The Chassis ID Length, Chassis ID
                        Subtype, Chassis ID, Management Address
                        Length and Management Address fields are
                        all to be sent.
       defer(5)          The contents of the Sender ID TLV are
                        determined by the corresponding
                        Maintenance Domain permission variable";
    reference
      "802.1ag clause 12.14.6.1.3:d and 21.5.3";
    type enumeration {
      enum none {
        value 1;
      }
      enum chassis {
        value 2;
      }
      enum manage {
        value 3;
      }
      enum chassis-manage {
        value 4;
      }
      enum defer {
        value 5;
      }
    }
  }

  typedef interval-type {
    description
      "The possible intervals between PDU transmissions.";
    type enumeration {
      enum 3330us;
      enum 10ms;
      enum 100ms;
      enum 1s;
      enum 10s;
      enum 60s;
      enum 600s;
    }
  }

  typedef mep-id-type {
    description
      "The MEP Identifier which is an integer that uniquely
       identifies the MEP over a given Maintenance Association.";
    reference
      "IEEE 802.1ag clauses 3.19, 12.14.7 and 19.2";
    type uint16 {
      range "1..8191";
    }
  }

  typedef mep-direction-type {
    description
      "The direction the MEP faces on the Bridge port.
       If 'down' the Management Point (MP) sends CFM PDUs away from the
       MAC Relay Entity. If 'up' the MP sends CFM PDUs towards the MAC Relay Entity.";
    reference
      "IEEE 802.1ag clauses 12.14.6.3.2:c";
    type enumeration {
      enum down;
      enum up;
    }
  }

  typedef vlan-id-or-none {
    description
      "The VLAN ID that uniquely identifies a specific VLAN,
       or no VLAN.  The special value of none is used to
       indicate that no VLAN ID is present or used.  This can
       be used in any situation where an object or a table entry
       must refer either to a specific VLAN, or to no VLAN.";
    type union {
      type int32 {
        range "1..4094";
      }
      type enumeration {
        enum none {
          value 0;
        }
      }
    }
  }

  typedef priority-type {
    description
      "Used to define the priority of OAM frames.";
    type uint8 {
      range "0..7";
    }
  }

  typedef highest-priority-defect-type {
    description
      "An enumerated value indicating the highest-priority defect that has been
       present since the MEP Fault Noffication Generator State Machine was last in
       the FNG_RESET state.";
    reference
      "IEEE 802.1ag clause 20.1.2, 12.14.7.7.2:c and 20.33.9";
    type enumeration {
      enum none {
        value 0;
      }
      enum rdi-ccm {
        value 1;
      }
      enum mac-status {
        value 2;
      }
      enum remote-ccm {
        value 3;
      }
      enum error-ccm {
        value 4;
      }
      enum xcon-ccm {
        value 5;
      }
    }
  }

  typedef lowest-alarm-priority-type {
    description
      "An enumerated value indicating the lowest priority defect that is
       allowed to generate a fault alarm.";
    reference
      "IEEE 802.1ag clause 12.14.7.1.3:k and 20.9.5";
    type enumeration {
      enum all-def {
        value 1;
      }
      enum mac-rem-err-xcon {
        value 2;
      }
      enum rem-err-xcon {
        value 3;
      }
      enum err-xcon {
        value 4;
      }
      enum xcon {
        value 5;
      }
      enum no-xcon {
        value 6;
      }
    }
  }

  typedef mep-defect-flag {
    description
      "A MEP can detect and report a number of defects, and multiple
       defects can be present at the same time. They are defined in
       IEEE 802.1ag and ITU-T G.8013/Y1731.";
    type union {
      type uint8;
      type bits {
        bit rdi {
          position 0;
        }
        bit loc {
          position 1;
        }
        bit unp {
          position 2;
        }
        bit unm {
          position 3;
        }
        bit mmg {
          position 4;
        }
        bit unl {
          position 5;
        }
      }
      type bits {
        bit rdi-ccm {
          position 0;
        }
        bit mac-status {
          position 1;
        }
        bit remote-ccm {
          position 2;
        }
        bit error-ccm {
          position 3;
        }
        bit xcon-ccm {
          position 4;
        }
      }
    }
  }

  typedef fault-propagation-type {
    description
      "The Fault Propagation type for a MEP

       When not set, no additional fault propagation will occur.
       use-if-status-tlv(1)     The MEP will send an interface status TLV in the next
                                CCM indicating fault when fault is detected, even if
                                the MEP itself has not detected a fault.
       suspend-ccm(2)           Faults will be propagated by stopping the regular CCM
                                transmissions entirely. Once the fault is cleared, the
                                regular CCM transmissions will resume.
                                Additionally, when the value of this leaf is set, a
                                defect detected by the MEP will be propagated into the
                                service.";
    type enumeration {
      enum disabled;
      enum use-if-status-tlv;
      enum suspend-ccm;
    }
    default "disabled";
  }

  typedef port-status-type {
    type enumeration {
      enum no-status-tlv {
        value 0;
        description
          "Indicates either that no CCM has been received or that
           no port status TLV was present in the last CCM received.";
      }
      enum blocked {
        value 1;
        description
          "Ordinary data cannot pass freely through the port on
           which the remote MEP resides. Value of enableRmepDefect
           is equal to false.";
      }
      enum up {
        value 2;
        description
          "Ordinary data can pass freely through the port on which
           the remote MEP resides. Value of enableRmepDefect is
           equal to true.";
      }
    }
    description
      "The set of values available from the Port Status TLV in CCM PDUs
       including the default no-status-tlv";
    reference
      "[802.1q] 20.19.3, 12.14.7.6.3:f
       IEEE8021-CFM-MIB.Dot1agCfmPortStatus";
  }

  typedef interface-status-type {
    type enumeration {
      enum no-status-tlv {
        value 0;
        description
          "Indicates either that no CCM has been received or that
           no interface status TLV was present in the last CCM received.";
      }
      enum up {
        value 1;
        description
          "The interface is ready to pass packets.";
      }
      enum down {
        value 2;
        description
          "The interface cannot pass packets.";
      }
      enum testing {
        value 3;
        description
          "The interface is in some test mode.";
      }
      enum unknown {
        value 4;
        description
          "The interface status cannot be determined for some reason.";
      }
      enum dormant {
        value 5;
        description
          "The interface is not in a state to pass packets but is in
           a pending state, waiting for some external event.";
      }
      enum not-present {
        value 6;
        description
          "Some component of the interface is missing.";
      }
      enum lower-layer-down {
        value 7;
        description
          "The interface is down due to state of the lower layer
           interfaces.";
      }
    }
    description
      "The set of values available from the Interface Status TLV in CCM PDUs
       including the default no-status-tlv";
    reference
      "[802.1q] 20.19.4, 12.14.7.6.3:g
       IEEE8021-CFM-MIB.Dot1agCfmInterfaceStatus";
  }

  typedef remote-mep-state-type {
    type enumeration {
      enum idle {
        value 1;
        description
          "Indicates momentary state during reset.";
      }
      enum start {
        value 2;
        description
          "Indicates the timer has not expired since the state machine was
           reset, and no valid CCM has yet been received.";
      }
      enum failed {
        value 3;
        description
          "Indicates The timer has expired, both since the state machine
           was reset, and since a valid CCM was received.";
      }
      enum ok {
        value 4;
        description
          "Indicates The timer has not expired since a valid CCM was received.";
      }
    }
    description
      "An enumerated value indicating the operational state of a Remote
       MEP state machine for a remote MEP.";
    reference
      "[802.1q] 12.14.7.6.3:b
       IEEE8021-CFM-MIB.Dot1agCfmRemoteMepState";
  }

  typedef ais-interval-type {
    type enumeration {
      enum one-second {
        description
          "A one second transmission interval";
      }
      enum one-minute {
        description
          "A one minute transmission interval";
      }
    }
    description
      "This enumeration data type defines the AIS/LCK interval (transmission
       period for a frame)";
    reference
      "[Y.1731] sections 7.4, 7.6; [MEF7.1] III.2";
  }

  typedef relay-action {
    type enumeration {
      enum hit {
        description
          "Indicates the LTM reached an MP whose MAC
           address matches the target MAC address.";
        value 1;
      }
      enum filtering-database {
        description
          "Indicates the Egress Port was determined
           by consulting the Filtering Database.";
        value 2;
      }
      enum mip-ccm-database {
        description
          "Indicates the Egress Port was determined
           by consulting the MIP CCM Database.";
        value 3;
      }
    }
  }

  typedef reply-action {
    type enumeration {
      enum ok {
        description
          "Indicates the target data frame would be
           passed through to the MAC Relay Entity.";
        value 1;
      }
      enum down {
        description
          "Indicates the Bridge Ports MAC Operational
           parameter is false.";
        value 2;
      }
      enum blocked {
        description
          "Indicates the target data frame would not
           be forwarded if received on this Port due
           to active topology enforement.";
        value 3;
      }
      enum vid {
        description
          "Indicates the ingress port is not in the
           member set of the LTMs VID, and ingress
           filtering is enabled, so the target data
           frame would be filtered by ingress filtering.";
        value 4;
      }
    }
  }
}
