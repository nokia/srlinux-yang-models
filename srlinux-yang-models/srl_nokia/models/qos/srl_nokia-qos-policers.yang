module srl_nokia-qos-policers {
  yang-version 1.1;
  namespace "urn:srl_nokia/qos-policers";
  prefix srl_nokia-qos-policers;

  import srl_nokia-common {
    prefix srl_nokia-comm;
  }
  import srl_nokia-features {
    prefix srl-feat;
  }
  import srl_nokia-extensions {
    prefix srl_nokia-ext;
  }

  revision 2022-11-30 {
    description
      "SRLinux 22.11.1";
  }
  revision 2022-06-30 {
    description
      "SRLinux 22.6.1";
  }
  revision 2022-03-31 {
    description
      "SRLinux 22.3.1";
  }

  typedef forwarding-type {
    type enumeration {
      enum unicast {
        description
          "A packet is 'unicast' if the destination address is unicast and it matches an entry in the FIB";
      }
      enum unknown-unicast {
        description
          "A packet is 'unknown-unicast' if the destination address is unicast but it doesn't match any entry in the FIB and is therefore conventionally flooded";
      }
      enum broadcast {
        description
          "A packet is 'broadcast' if the destination address is a broadcast address.";
      }
      enum multicast {
        description
          "A packet is 'multicast' if the destination address is a multicast address

           On TD3 systems this includes multicast packets with a known destination/group address and multicast packets with an unknown destination/group address. On TD4 systems this only includes known multicast packets.";
      }
      enum unknown-multicast {
        if-feature "srl-feat:trident4";
        description
          "Multicast packets with an unknown destination/group address";
      }
    }
  }

  typedef drop-probability-level {
    description
      "The various drop probability classifications that can be applied to a packet";
    type enumeration {
      enum low {
        description
          "Traffic that should be dropped last when there is congestion. Internally this is traffic that is colored green.";
      }
      enum medium {
        description
          "Traffic that should be dropped before green traffic but after red traffic when there is congestion. Internally this is traffic that is colored yellow.";
      }
      enum high {
        description
          "Traffic that should be dropped first when there is congestion. Internally this is traffic that is colored red.";
      }
    }
  }

  grouping policers-top {
    container policers {
      if-feature "srl-feat:future-0-0";
      description
        "Global confugration of user defined policer-names
         Per default there are no policers created";
      list policer {
        description
          "List of policers";
        key "name";
        leaf name {
          description
            "The name assigned to the policer";
          type srl_nokia-comm:name;
        }
        leaf policer-id {
          description
            "Policer index within a single block";
          type uint8 {
            range "0..31";
          }
        }
      }
    }
  }

  grouping policer-templates-top {
    container policer-templates {
      if-feature "srl-feat:ingress-subif-policing";
      description
        "Policer templates used for subinterface traffic metering.";
      list policer-template {
        description
          "List of policer templates.";
        key "name";
        leaf name {
          description
            "The name assigned to the policer template.";
          type srl_nokia-comm:name;
        }
        list policer {
          max-elements 32;
          description
            "The list of policer instances belonging to the template definition.";
          key "sequence-id";
          leaf sequence-id {
            type uint32 {
              range "1..65535";
            }
            description
              "A number to indicate the relative evaluation order of the different policers in a template; policers with lower sequence-id numbers are evaluated before policers with higher sequence-id numbers";
          }
          list forwarding-class {
            description
              "The list of forwarding classes with traffic to be sent to the policer. If this list is not configured then all subinterface traffic is matched.";
            key "fc";
            leaf fc {
              type union {
                type leafref {
                  path "../../../../../forwarding-classes/forwarding-class/name";
                }
                type srl_nokia-comm:default-forwarding-class;
              }
              description
                "A forwarding class that has traffic to match to the policer";
              must "../../../../../forwarding-classes/forwarding-class[name = current()]/name = current () or
                    re-match(.,'fc[0-7]')" {
                error-message "forwarding-class doesn't exist";
              }
            }
            leaf-list forwarding-type {
              ordered-by system;
              max-elements 5;
              description
                "The list of forwarding types, belonging to this forwarding-class, to match to the policer. If none are specified, this implies ALL forwarding types.";
              type forwarding-type;
            }
          }
          leaf peak-rate-kbps {
            mandatory true;
            type uint32;
            units "kbps";
            description
              "The peak information rate (PIR) of the policer, defined in kilobits (1024 bits) per second.
               On 7220-D2/D3 the minimum rate is 8 Kbps";
          }
          leaf committed-rate-kbps {
            mandatory true;
            type uint32;
            units "kbps";
            description
              "The committed information rate (CIR) of the policer, defined in kilobits (1024 bits) per second
               On 7220-D2/D3 the minimum rate  is 8 Kbps";
          }
          leaf maximum-burst-size {
            mandatory true;
            type uint32;
            units "bytes";
            description
              "Maximum PIR bucket depth in bytes.
               On 7220-D2/D3 the lower limit is 512 Bytes and higher limit is 268 MB";
          }
          leaf committed-burst-size {
            mandatory true;
            type uint32;
            units "bytes";
            description
              "Maximum CIR bucket depth in bytes.
               On 7220-D2/D3 the lower limit is 512 Bytes and higher limit is 268 MB";
          }
          container exceed-action {
            description
              "Container with options that specify the handling of packets that the policer has determined are exceeding (yellow)";
            leaf drop-probability {
              description
                "Recolor exceeding packets to the specified drop-probability level";
              type drop-probability-level;
              default "medium";
            }
          }
          container violate-action {
            description
              "Container with options that specify the handling of packets that the policer has determined are violating (red)";
            choice violate-handling {
              default "re-color";
              case drop {
                leaf drop {
                  description
                    "Violating packets should be dropped immediately";
                  type empty;
                }
              }
              case re-color {
                leaf drop-probability {
                  description
                    "Recolor violating packets to the specified drop-probability level";
                  type drop-probability-level;
                  default "high";
                }
              }
            }
          }
        }
        leaf statistics-mode {
          description
            "The statistics mode of all policers belonging to this template";
          type enumeration {
            enum violating-focus {
              description
                "In this statistics mode only 4 counters are provided: accepted-packets, accepted-octets, violating-packets, violating-octets";
            }
            enum forwarding-focus {
              description
                "In this statistics mode only 4 counters are provided: committed-packets, committed-octets, exceeding-packets, exceeding-octets";
            }
          }
          default "violating-focus";
        }
      }
    }
  }

  grouping policer-instance-state {
    leaf peak-rate-kbps {
      config false;
      type uint32;
      units "kbps";
      description
        "The actual/operational peak information rate (PIR) of the policer as it is programmed into hardware.";
    }
    leaf committed-rate-kbps {
      config false;
      type uint32;
      units "kbps";
      description
        "The actual/operational committed information rate (CIR) of the policer as it is programmed into hardware.";
    }
    leaf maximum-burst-size {
      config false;
      type uint32;
      units "bytes";
      description
        "The actual/operational maximum PIR bucket depth in bytes as it is programmed into hardware.";
    }
    leaf committed-burst-size {
      config false;
      type uint32;
      units "bytes";
      description
        "The actual/operational maximum CIR bucket depth in bytes as it is programmed into hardware.";
    }
    container statistics {
      config false;
      leaf accepted-packets {
        type srl_nokia-comm:zero-based-counter64;
        description
          "The number packets that were accepted by the policer, counting all drop-probabilities at policer output

           Not available in forwarding-focus mode";
      }
      leaf accepted-octets {
        type srl_nokia-comm:zero-based-counter64;
        description
          "The number octets in packets that were accepted by the policer, counting all drop-probabilities at policer output

           Not available in forwarding-focus mode";
      }
      leaf violating-packets {
        type srl_nokia-comm:zero-based-counter64;
        description
          "The number packets that were considered violating by the policer

           Not available in forwarding-focus mode";
      }
      leaf violating-octets {
        type srl_nokia-comm:zero-based-counter64;
        description
          "The number of octets in packets that were considered violasting by the policer

           Not available in forwarding-focus mode";
      }
      leaf committed-packets {
        type srl_nokia-comm:zero-based-counter64;
        description
          "The number packets that were acceped with low drop-probability at policer output

           Not available in violating-focus mode";
      }
      leaf committed-octets {
        type srl_nokia-comm:zero-based-counter64;
        description
          "The number octets in packets that were acceped with low drop-probability at policer output

           Not available in violating-focus mode";
      }
      leaf exceeding-packets {
        type srl_nokia-comm:zero-based-counter64;
        description
          "The number packets that were accepted with medium drop-probability at policer output

           Not available in violating-focus mode";
      }
      leaf exceeding-octets {
        type srl_nokia-comm:zero-based-counter64;
        description
          "The number of octets in packets that were accepted with medium drop-probability at policer output

           Not available in violating-focus mode";
      }
    }
  }
}
