module srl_nokia-mld-snooping {
  yang-version 1.1;
  namespace "urn:srl_nokia/mld-snooping";
  prefix srl_nokia-mld-snooping;

  import ietf-yang-types {
    prefix yang;
  }
  import srl_nokia-common {
    prefix srl_nokia-comm;
  }
  import srl_nokia-network-instance {
    prefix srl_nokia-netinst;
  }
  import srl_nokia-routing-policy {
    prefix srl-rpol;
  }
  import srl_nokia-igmp-types {
    prefix srl_nokia-igmp-types;
  }
  import srl_nokia-features {
    prefix srl_nokia-feat;
  }

  description
    "This yang file models configuration and state of the mld snooping protocol on mac-vrf";

  revision 2022-06-30 {
    description
      "SRLinux 22.6.1";
  }

  typedef mld-version {
    type uint8 {
      range "1..2";
    }
    description
      "MLD Version.";
    reference
      "v1 = RFC2710, v2 = RFC4604";
  }

  typedef mld-interval-type {
    type uint32;
    units "seconds";
    description
      "Interval at which the router sends the MLD query message toward
       the upstream neighbor.";
    reference
      "RFC3376 8.2 Page 40";
  }

  grouping mld-interface-key {
    leaf interface-name {
      description
        "Reference to a specific subinterface of the form <interface-name>.<subinterface-index>";
      type leafref {
        path "/srl_nokia-netinst:network-instance[srl_nokia-netinst:name = current()/../../../../srl_nokia-netinst:name]/srl_nokia-netinst:interface/srl_nokia-netinst:name";
      }
    }
  }

  grouping mld-group-range-keys {
    leaf start {
      type srl_nokia-comm:ipv6-address;
      description
        "start of the group range.";
      must "starts-with(.,'ff')" {
        error-message "Not a valid IPv6 multicast address";
      }
      must "not (re-match(.,'[f]{2}[0-9a-f][0-3].*') or re-match(.,'[f]{2}[0-9a-f][f].*'))" {
        error-message "Not a valid IPv6 multicast addres scope";
      }
    }
    leaf end {
      type srl_nokia-comm:ipv6-address;
      description
        "end of the group range.";
      must "starts-with(.,'ff')" {
        error-message "Not a valid IPv6 multicast address";
      }
      must "not (re-match(.,'[f]{2}[0-9a-f][0-3].*') or re-match(.,'[f]{2}[0-9a-f][f].*'))" {
        error-message "Not a valid IPv6 multicast addres scope";
      }
    }
  }

  grouping mld-snooping-global-trace-options {
    container trace-options {
      description
        "Enter the trace-options context";
      container trace {
        description
          "Tracing parameter flags";
        container packet {
          presence "Enable the tracing of MLD packets";
          description
            "Trace MLD Packet types";
          list interface {
            description
              "List of interfaces to trace.";
            key "interface-name";
            leaf interface-name {
              description
                "Reference to a specific subinterface of the form <interface-name>.<subinterface-index>";
              type leafref {
                path "/srl_nokia-netinst:network-instance[srl_nokia-netinst:name = current()/../../../../../../../srl_nokia-netinst:name]/srl_nokia-netinst:interface/srl_nokia-netinst:name";
              }
            }
          }
          list source-mac {
            description
              "List of source mac addresses to trace.";
            key "source-mac";
            leaf source-mac {
              type srl_nokia-comm:mac-address;
            }
          }
          leaf modifier {
            type enumeration {
              enum dropped {
                value 0;
                description
                  "Enable tracing for the packets which are dropped.";
              }
              enum ingress-and-dropped {
                value 1;
                description
                  "Enable tracing for the packets which are sent or received.";
              }
              enum egress-ingress-and-dropped {
                value 2;
                description
                  "Enable tracing for the packets which are sent, received or dropped.";
              }
            }
          }
        }
      }
    }
  }

  grouping mld-snooping-mrouter-state {
    leaf address {
      config false;
      description
        "The source IP address used by queries sent out by this multicast router.";
      type srl_nokia-comm:ipv6-address;
    }
    leaf version {
      config false;
      description
        "The version of the protocol that is sent by this multicast router.";
      type mld-version;
    }
    leaf up-time {
      config false;
      description
        "The time since this multicast router has been known in this service.";
      type uint32;
      units "seconds";
    }
    leaf expiry-time {
      config false;
      description
        "The time remaining before this multicast router is aged out.";
      type uint32;
      units "seconds";
    }
    container mld-v2-states {
      config false;
      description
        "Enter the mld-v2-states context";
      leaf general-query-interval {
        description
          "The General Query Interval used by this multicast router.";
        type uint32;
        units "seconds";
      }
      leaf general-response-interval {
        description
          "The General Query Response interval used by this multicast router.";
        type uint32;
        units "seconds";
      }
      leaf robust-count {
        description
          "The Robust Count value used by this multicast router.";
        type uint32;
      }
    }
    leaf interface {
      config false;
      description
        "Interface behind which this multicast router is located.";
      type leafref {
        path "/srl_nokia-netinst:network-instance[srl_nokia-netinst:name = current()/../../../../srl_nokia-netinst:name]/srl_nokia-netinst:interface/srl_nokia-netinst:name";
      }
    }
  }

  grouping mld-snooping-global-config {
    description
      "MLD specific configuration.";
    leaf admin-state {
      description
        "Administratively enable or disable the MLD instance.";
      type srl_nokia-comm:admin-state;
      default "disable";
    }
    leaf query-interval {
      description
        "Interval at which the router sends the MLD membership queries";
      type mld-interval-type {
        range "2..1024";
      }
      default "125";
    }
    leaf robust-count {
      description
        "Configures the MLD robustness to allow for the expected MLD packet loss.

         The robust-count variable allows tuning for the expected packet
         loss on a subnet. If a subnet anticipates losses, the robust-count
         variable can be increased.";
      type uint32 {
        range "2..10";
      }
      default "2";
    }
    leaf query-source-address {
      type srl_nokia-comm:ipv6-address;
      description
        "Source IP address used when generating MLD queries";
    }
    leaf report-source-address {
      type srl_nokia-comm:ipv6-address;
      description
        "Source IP address used when generating MLD reports";
    }
    container evpn-proxy {
      description
        "BGP-EVPN proxy information.";
      reference
        "draft-ietf-bess-evpn-igmp-mld-proxy";
      leaf admin-state {
        description
          "Used to administratively enable or disable the use of EVPN to
           create multicast state.";
        type srl_nokia-comm:admin-state;
        default "disable";
      }
    }
  }

  grouping mld-snooping-global-state {
    leaf oper-state {
      config false;
      description
        "Used to report operational state of the MLD instance.";
      type srl_nokia-comm:admin-state;
    }
    leaf transmitted-bgp-smet-routes {
      config false;
      description
        "Transmitted BGP SMET routes";
      type yang:counter32;
    }
    container querier {
      description
        "Enter the querier context";
      uses mld-snooping-mrouter-state;
    }
    list multicast-routers {
      config false;
      description
        "Enter the multicast-router list instance";
      key "address";
      uses mld-snooping-mrouter-state;
    }
    leaf membership-group-count {
      config false;
      description
        "The number of multicast groups which have been learned.";
      type uint32;
    }
    container membership-groups {
      config false;
      description
        "List of MLD Membership information.";
      list group {
        key "group";
        config false;
        description
          "Multicast group membership.";
        leaf group {
          type srl_nokia-comm:ipv6-address;
          description
            "Multicast address.";
        }
        leaf filter-mode {
          config false;
          type srl_nokia-igmp-types:filter-mode;
        }
        leaf up-time {
          config false;
          description
            "The time elapsed since this entry was created.";
          type uint32;
          units "seconds";
        }
        list source {
          config false;
          key "source";
          description
            "Source addresses of multicast.";
          leaf source {
            type srl_nokia-comm:ipv6-address;
            description
              "Source address of multicast.";
          }
          leaf up-time {
            config false;
            description
              "The time elapsed since this entry was created.";
            type uint32;
            units "seconds";
          }
        }
      }
    }
    container evpn-membership-groups {
      config false;
      description
        "List of MLD Evpn Membership information.";
      list group {
        key "group";
        config false;
        description
          "Multicast group membership.";
        leaf group {
          type srl_nokia-comm:ipv6-address;
          description
            "Multicast address.";
        }
        leaf filter-mode {
          config false;
          type srl_nokia-igmp-types:filter-mode;
        }
        leaf up-time {
          config false;
          description
            "The time elapsed since this entry was created.";
          type uint32;
          units "seconds";
        }
        leaf v1-support {
          config false;
          description
            "MLD Version 1 is supported.";
          type boolean;
        }
        leaf v2-support {
          config false;
          description
            "MLD Version 2 is supported.";
          type boolean;
        }
        list source {
          config false;
          key "source";
          description
            "Source addresses of multicast.";
          leaf source {
            type srl_nokia-comm:ipv6-address;
            description
              "Source address of multicast.";
          }
          leaf up-time {
            config false;
            description
              "The time elapsed since this entry was created.";
            type uint32;
            units "seconds";
          }
        }
      }
    }
  }

  grouping mld-snooping-interface-config {
    leaf router-alert-check {
      description
        "Enable or disable router alert checking for MLD messages received on this interface.";
      type boolean;
      default "true";
    }
    leaf version {
      description
        "MLD Version";
      type mld-version;
      default "2";
    }
    leaf maximum-number-groups {
      description
        "Maximum number of MLD Groups for this interface.";
      type uint32 {
        range "1..4096";
      }
    }
    leaf maximum-number-sources {
      description
        "Maximum number of MLD sources per group for this interface.";
      type uint32 {
        range "1..512";
      }
    }
    leaf maximum-number-group-sources {
      description
        "Maximum number of MLD group/source combinations for this interface.";
      type uint32 {
        range "1..4096";
      }
    }
    leaf query-interval {
      description
        "Interval at which the router sends the MLD membership queries";
      type mld-interval-type {
        range "2..1024";
      }
      must '. > ../query-response-interval' {
        error-message "query-response-interval must be less than query-interval";
      }
      must '. > ../query-last-member-interval' {
        error-message "query-last-member-interval must be less than query-interval";
      }
    }
    leaf query-last-member-interval {
      description
        "Interval at which Group-Specific-Query packets are transmitted";
      type mld-interval-type {
        range "1..1023";
      }
    }
    leaf query-response-interval {
      description
        "Time to wait to receive a response to the MLD membership query from the host";
      type mld-interval-type {
        range "1..1023";
      }
    }
    leaf robust-count {
      description
        "Tune MLD robustness to allow for expected packet loss.

         The robust-count variable allows tuning for the expected packet
         loss on a subnet. If a subnet anticipates losses, the robust-count
         variable can be increased.";
      type uint32 {
        range "2..10";
      }
      default "2";
    }
    leaf fast-leave {
      description
        "Allow MLD fast leave processing

         When enabled, the multicast state is removed immediately upon receiving an MLD
         leave message.";
      type boolean;
      default "false";
    }
    leaf mrouter-port {
      description
        "Operate port as a multicast router port";
      type boolean;
      default "false";
    }
    leaf send-queries {
      description
        "Generate MLD general queries";
      type boolean;
      default "false";
      must "not(. = 'true' and ../mrouter-port = 'true')" {
        error-message "mrouter-port and send-queries are mutually exclusive";
      }
    }
    leaf import-policy {
      description
        "Apply an import policy. The lenght of the policy name should not exceed 32 charachters.";
      type leafref {
        path "/srl-rpol:routing-policy/srl-rpol:policy/srl-rpol:name";
      }
    }
    container static-membership-groups {
      description
        "Container to configure static <S,G>s for this interface.";
      list group-range {
        key "start end";
        uses mld-group-range-keys;
        choice source-or-starg {
          mandatory true;
          case source {
            list source {
              description
                "Multicast source address list.";
              key "source";
              leaf source {
                type srl_nokia-comm:ipv6-address;
                description
                  "Multicast source address.";
                must "not(.='::/128' or .='::1/128' or starts-with(.,'ff') or starts-with(.,'fe80'))" {
                  error-message "Not a valid IPv6 unicast addres";
                }
              }
            }
          }
          case starg {
            leaf starg {
              description
                "any source address (*,G)";
              type empty;
            }
          }
        }
      }
    }
  }

  grouping mld-snooping-msg-stats {
    leaf general-queries {
      config false;
      description
        "General Queries.";
      type yang:zero-based-counter32;
    }
    leaf group-queries {
      config false;
      description
        "Group Specific Queries.";
      type yang:zero-based-counter32;
    }
    leaf group-source-queries {
      config false;
      description
        "Group and Source Specific Queries.";
      type yang:zero-based-counter32;
    }
    leaf v1-reports {
      config false;
      description
        "V1 Reports.";
      type yang:zero-based-counter32;
    }
    leaf v2-reports {
      config false;
      description
        "V2 Reports.";
      type yang:zero-based-counter32;
    }
    leaf leave-messages {
      config false;
      description
        "Leave messages.";
      type yang:zero-based-counter32;
    }
    leaf discarded-packets {
      config false;
      description
        "Total number of discarded MLD packets.";
      type yang:zero-based-counter32;
    }
  }

  grouping mld-snooping-msg-tx-stats {
    uses mld-snooping-msg-stats;
    leaf error-packets {
      config false;
      description
        "Transmission error MLD packets.";
      type yang:zero-based-counter32;
    }
  }

  grouping mld-snooping-msg-fwd-stats {
    uses mld-snooping-msg-stats;
    leaf unknown-type {
      config false;
      description
        "Unknown MLD types.";
      type yang:zero-based-counter32;
    }
    leaf errors {
      config false;
      description
        "Forwarding Errors.";
      type yang:zero-based-counter32;
    }
  }

  grouping mld-snooping-msg-error-stats {
    leaf bad-length {
      config false;
      description
        "Bad length.";
      type yang:zero-based-counter32;
    }
    leaf unknown-type {
      config false;
      description
        "Unknown type.";
      type yang:zero-based-counter32;
    }
    leaf wrong-version {
      config false;
      description
        "Wrong version.";
      type yang:zero-based-counter32;
    }
    leaf import-policy-drops {
      config false;
      description
        "Number of times the host IP address or group or
         source IP addresses specified in the import policy are matched.";
      type yang:zero-based-counter32;
    }
    leaf missing-router-alert {
      config false;
      description
        "Router alert flag is not set.";
      type yang:zero-based-counter32;
    }
    leaf bad-encoding {
      config false;
      description
        "Badly encoded packets.";
      type yang:zero-based-counter32;
    }
    leaf local-scope {
      config false;
      description
        "Link-local scope multicast group address.";
      type yang:zero-based-counter32;
    }
    leaf reached-maximum-number-groups {
      config false;
      description
        "Number of times a join is discarded because the maximum number of
         groups is reached.";
      type yang:zero-based-counter32;
    }
    leaf reached-maximum-number-group-sources {
      config false;
      description
        "Number of times a join is discarded because the maximum number of
         group-source combinations is reached.";
      type yang:zero-based-counter32;
    }
    leaf reached-maximum-number-sources {
      config false;
      description
        "Number of times a join is discarded because the maximum number of
         sources per group is reached.";
      type yang:zero-based-counter32;
    }
    leaf out-of-memory-discarded-packets {
      config false;
      description
        "Number of times a join is discarded because the router ran out of memory.";
      type yang:zero-based-counter32;
    }
    leaf bad-ip-checksum {
      config false;
      description
        "Number of times a packet is discarded because of a bad IP header checksum.";
      type yang:zero-based-counter32;
    }
    leaf bad-mld-checksum {
      config false;
      description
        "Number of times a packet is discarded because of a bad MLD header checksum.";
      type yang:zero-based-counter32;
    }
    leaf zero-source-ip-address {
      config false;
      description
        "Number of times a packet is discarded because it has a zero source IP address.";
      type yang:zero-based-counter32;
    }
    leaf send-query-configured-discarded-packets {
      config false;
      description
        "Number of times a query is discarded because send-queries is configured in the
         sub-interface.";
      type yang:zero-based-counter32;
    }
  }

  grouping mld-snooping-statistics-state {
    container received {
      config false;
      description
        "Received message statistics.";
      uses mld-snooping-msg-stats;
    }
    container transmitted {
      config false;
      description
        "Transmit message statistics.";
      uses mld-snooping-msg-tx-stats;
    }
    container forwarded {
      config false;
      description
        "Forward message statistics.";
      uses mld-snooping-msg-fwd-stats;
    }
    container error {
      config false;
      description
        "Error message statistics.";
      uses mld-snooping-msg-error-stats;
    }
  }

  grouping mld-snooping-interface-group-source-state {
    leaf source-type {
      config false;
      type srl_nokia-igmp-types:learn-type;
    }
    leaf forwarding-state {
      config false;
      description
        "Traffic forwardeding state on this port.";
      type srl_nokia-igmp-types:forwarding-state;
    }
    leaf up-time {
      config false;
      description
        "The time elapsed since this entry was created.";
      type uint32;
      units "seconds";
    }
    leaf expiry-time {
      config false;
      description
        "The time left before multicast group timeout.";
      type uint32;
      units "seconds";
    }
  }

  grouping mld-snooping-interface-group-state {
    description
      "MLD membership state.";
    leaf group-type {
      config false;
      type srl_nokia-igmp-types:learn-type;
    }
    leaf filter-mode {
      config false;
      type srl_nokia-igmp-types:filter-mode;
    }
    leaf expiry-time {
      config false;
      description
        "The time left before multicast group timeout.";
      type uint32;
      units "seconds";
    }
    leaf up-time {
      config false;
      description
        "The time elapsed since this entry was created.";
      type uint32;
      units "seconds";
    }
    leaf v1-host-timer {
      config false;
      description
        "The time remaining until the local router will assume that
         there are no longer any version 1 members.";
      type uint32;
      units "seconds";
    }
    leaf mld-compatibility-mode {
      config false;
      description
        "Compatibility with older version routers.";
      type srl_nokia-igmp-types:mld-version;
    }
  }

  grouping mld-snooping-membership {
    description
      "MLD membership information.";
    leaf membership-group-count {
      config false;
      description
        "The number of multicast groups which have been learned.";
      type uint32;
    }
    container membership-groups {
      config false;
      description
        "List of MLD Membership information.";
      list group {
        key "group";
        config false;
        description
          "Multicast group membership.";
        leaf group {
          type srl_nokia-comm:ipv6-address;
          description
            "Multicast address.";
        }
        uses mld-snooping-interface-group-state;
        list source {
          config false;
          key "source";
          description
            "Source addresses of multicast.";
          leaf source {
            type srl_nokia-comm:ipv6-address;
            description
              "Source address of multicast.";
          }
          uses mld-snooping-interface-group-source-state;
        }
      }
    }
  }

  grouping mld-snooping-interface-state {
    uses mld-snooping-membership;
    container statistics {
      config false;
      description
        "MLD sub-interface statistics.";
      uses mld-snooping-statistics-state;
    }
  }

  grouping mld-snooping-top {
    container mld-snooping {
      if-feature "srl_nokia-feat:mld-snooping";
      presence "Configure MLD snooping";
      must "(../../srl_nokia-netinst:type = 'srl_nokia-netinst:mac-vrf')" {
        error-message "IMGP snooping configuration is only possible on network-instance of type mac-vrf";
      }
      uses mld-snooping-global-config;
      uses mld-snooping-global-trace-options;
      uses mld-snooping-global-state;
      list interface {
        description
          "List of MLD interfaces";
        key "interface-name";
        uses mld-interface-key;
        uses mld-snooping-interface-config;
        uses mld-snooping-interface-state;
      }
    }
  }

  augment "/srl_nokia-netinst:network-instance/srl_nokia-netinst:protocols" {
    uses mld-snooping-top;
  }
}
