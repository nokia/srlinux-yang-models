module srl_nokia-rib-bgp {
  yang-version 1.1;
  namespace "urn:nokia.com:srlinux:bgp:rib-bgp";
  prefix srl_nokia-rib-bgp-routes;

  import srl_nokia-common {
    prefix srl_nokia-comm;
  }
  import srl_nokia-extensions {
    prefix srl_nokia-ext;
  }
  import srl_nokia-network-instance {
    prefix srl_nokia-netinst;
  }
  import srl_nokia-features {
    prefix srl-feat;
  }
  import srl_nokia-ip-route-tables {
    prefix srl_nokia-rt;
  }

  organization
    "Nokia";
  contact
    "Nokia SR Linux Support
     Web: <http://www.nokia.com>";
  description
    "This yang file models the state held by the BGP RIB databases.";

  revision 2024-07-31 {
    description
      "SRLinux 24.7.1";
  }
  revision 2024-03-31 {
    description
      "SRLinux 24.3.1";
  }
  revision 2023-10-31 {
    description
      "SRLinux 23.10.1";
  }
  revision 2023-07-31 {
    description
      "SRLinux 23.7.1";
  }
  revision 2023-03-31 {
    description
      "SRLinux 23.3.1";
  }
  revision 2022-11-30 {
    description
      "SRLinux 22.11.1";
  }
  revision 2022-03-31 {
    description
      "SRLinux 22.3.1";
  }
  revision 2021-06-30 {
    description
      "SRLinux 21.6.1";
  }
  revision 2021-03-31 {
    description
      "SRLinux 21.3.1";
  }
  revision 2020-06-30 {
    description
      "SRLinux 20.6.1";
  }
  revision 2019-11-30 {
    description
      "SRLinux 19.11.1";
  }

  identity prefix-sid-tlv-type {
    description
      "Base identity for a prefix SID TLV type.";
  }

  identity label-index {
    base prefix-sid-tlv-type;
    description
      "Label index TLV";
  }

  identity srgb-originator {
    base prefix-sid-tlv-type;
    description
      "SRGB originator TLV";
  }

  identity srv6-l3-service {
    base prefix-sid-tlv-type;
    description
      "SRv6 L3 service TLV";
  }

  identity srv6-l2-service {
    base prefix-sid-tlv-type;
    description
      "SRv6 L2 service TLV";
  }

  typedef route-target-prefix {
    description
      "An RTC prefix in the format number1:number2/length, where number1 is an IPv4 address or a 2-byte ASN or a 4-byte ASN, number2 is a 2-byte or 4-byte administrative value and length is a number of bits between 0 and 96

       The default RTC prefix is represented by 0:0/0";
    srl_nokia-ext:generated-class-name "InterfaceName";
    type string;
  }

  typedef label-type {
    type enumeration {
      enum mpls-label {
        value 1;
      }
      enum vni {
        value 2;
      }
      enum transposed-srv6-function {
        value 3;
      }
    }
    description
      "The type of label encoded in the label field of an EVPN route or EVPN attribute

       The value depends on whether the route is received or advertised for an MPLS service
       (in which case the type will be mpls-label), for a VXLAN service (vni or VXLAN Network
       Identifier) or an SRv6 service where the function value is transposed into a label
       field (transposed-srv6-function).";
  }

  grouping state-common-key {
    leaf prefix {
      type srl_nokia-comm:ip-prefix;
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf path-id {
      description
        "Path identifier of the BGP route";
      type uint32;
    }
  }

  grouping state-common-local-rib-key {
    leaf prefix {
      type srl_nokia-comm:ip-prefix;
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf origin-protocol {
      description
        "If the route was imported from another protocol, this is the protocol name.";
      type identityref {
        base srl_nokia-comm:ip-route-type;
      }
    }
    leaf path-id {
      description
        "Path identifier of the BGP route";
      type uint32;
    }
  }

  grouping rtc-key {
    leaf origin-as {
      type srl_nokia-comm:as-number;
      description
        "The origin AS of the RTC route";
    }
    leaf route-target-prefix {
      type route-target-prefix;
      description
        "The RTC prefix in the format number1:number2/length, where number1 is an IPv4 address or a 2-byte ASN or a 4-byte ASN, number2 is a 2-byte or 4-byte administrative value and length is a number of bits between 0 and 96

         The default RTC prefix is represented by 0:0/0";
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor.";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf path-id {
      description
        "Path identifier of the BGP route";
      type uint32;
    }
  }

  grouping state-routes-common {
    leaf last-modified {
      description
        "Time of the last modification of the route stored in the BGP RIB. For a route learned from a BGP neighbor the initial value is the same as last-updatereceived. If an import policy later changed some attribute of the route last-modified would be updated to reflect the time of this change.";
      type srl_nokia-comm:date-and-time-delta;
    }
    leaf used-route {
      description
        "Indicates true if the route is being used for forwarding.";
      type boolean;
    }
    leaf valid-route {
      description
        "Indicates true if the route is valid.";
      type boolean;
    }
    leaf best-route {
      description
        "Set to true if the route is the BGP best path for the prefix.";
      type boolean;
    }
    leaf stale-route {
      description
        "Set to true if the route is stale due to BGP graceful restart.";
      type boolean;
    }
    leaf pending-delete {
      description
        "Set to true if the route is marked for deletion.";
      type boolean;
    }
    leaf neighbor-as {
      type srl_nokia-comm:as-number;
      description
        "The last external AS to advertise the route into the local AS";
    }
    leaf group-best {
      type boolean;
      description
        "Set to true if the route is the best BGP route amongst all routes received from one particular neighbor AS";
    }
    leaf tie-break-reason {
      description
        "Indicates the reason why a BGP route is sorted behind the next best route. The BGP best path displays a value of 'none'.";
      type enumeration {
        enum unknown {
          value -1;
        }
        enum none {
          value 0;
        }
        enum origin {
          value 1;
        }
        enum as-path-length {
          value 2;
        }
        enum next-hop-cost {
          value 3;
        }
        enum med {
          value 4;
        }
        enum local-pref {
          value 5;
        }
        enum aggregate {
          value 6;
        }
        enum originator-id {
          value 7;
        }
        enum cluster-list {
          value 9;
        }
        enum extended-community {
          value 10;
        }
        enum aigp {
          value 11;
        }
        enum missing-attribute {
          value 12;
        }
        enum rtm-pref {
          value 13;
        }
        enum owner {
          value 14;
        }
        enum eigp-labeled {
          value 15;
        }
        enum vpn-route {
          value 16;
        }
        enum ebgp-route {
          value 17;
        }
        enum peer-ip {
          value 18;
        }
        enum local-peer {
          value 19;
        }
        enum multi-path {
          value 20;
        }
        enum vpn-rd {
          value 21;
        }
        enum next-hop-type {
          value 22;
        }
        enum invalid-route {
          value 23;
        }
        enum origin-validation {
          value 24;
        }
        enum long-live-gr-stale {
          value 25;
        }
        enum default-originate {
          value 26;
        }
        enum fib-install-disabled {
          value 27;
        }
        enum peer-router-id {
          value 28;
        }
        enum path-identifier {
          value 29;
        }
      }
    }
    container invalid-reason {
      leaf rejected-route {
        description
          "Indicates true if the route was rejected by an import policy.";
        type boolean;
      }
      leaf as-loop {
        description
          "Indicates true if the BGP route has an AS path loop that exceeds the configured threshold.";
        type boolean;
      }
      leaf next-hop-unresolved {
        description
          "Indicates true if the BGP route has a BGP next-hop that cannot be resolved to an outgoing interface.";
        type boolean;
      }
      leaf cluster-loop {
        description
          "Indicates true if the BGP route has a cluster-list loop.";
        type boolean;
      }
      leaf label-allocation-failed {
        description
          "Indicates true if dynamic-label-block has no more free labels";
        type boolean;
      }
      leaf fib-programming-failed {
        description
          "Indicates true if FIB programming failed";
        type boolean;
      }
    }
    container route-flap-damping {
      if-feature "srl-feat:bgp-route-flap-damping";
      description
        "Route flap damping state";
      leaf suppressed {
        description
          "Reads true when a non-withdrawn route is suppressed because FOM > suppress-threshold";
        type boolean;
      }
      leaf history {
        description
          "Reads true when the current FOM for a recently withdrawn route is greater than 0";
        type boolean;
      }
      leaf decayed {
        description
          "Reads true when the current FOM for a non-withdrawn route is greater than 0 but less than the suppress-threshold";
        type boolean;
      }
    }
  }

  grouping evpn-ethernet-ad-common {
    leaf route-distinguisher {
      description
        "The route distinguisher encoded in the NLRI";
      type srl_nokia-comm:route-distinguisher;
    }
    leaf esi {
      description
        "The Ethernet Segment Identifier encoded in the NLRI";
      type srl_nokia-comm:esi;
    }
    leaf ethernet-tag-id {
      description
        "The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain";
      type uint32;
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor";
      type srl_nokia-comm:ip-address-with-zone;
    }
    container label {
      description
        "The encoded label value and type in the EVPN NLRI";
      leaf value {
        description
          "The value of the label field

           If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
           If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
           an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
           value if transposition is used. For all the cases, if this is an Auto-Discovery per ES route,
           this leaf is set to zero.";
        type uint32 {
          range "0..16777215";
        }
      }
      leaf value-type {
        description
          "Whether the encoded label value is an mpls-label, a vni or a transposed function or argument";
        type label-type;
      }
    }
    leaf attr-id {
      description
        "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
      type leafref {
        path "/srl_nokia-netinst:network-instance/srl_nokia-rib-bgp-routes:bgp-rib/srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
      }
    }
  }

  grouping evpn-mac-ip-common {
    leaf route-distinguisher {
      description
        "The route distinguisher encoded in the NLRI";
      type srl_nokia-comm:route-distinguisher;
    }
    leaf mac-length {
      description
        "MAC address length";
      type uint8 {
        range "0..48";
      }
      units "bits";
    }
    leaf mac-address {
      description
        "The MAC address";
      type srl_nokia-comm:mac-address;
    }
    leaf ip-address {
      description
        "The IP host address";
      type srl_nokia-comm:ip-address;
    }
    leaf ethernet-tag-id {
      description
        "The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain.";
      type uint32;
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf esi {
      description
        "The Ethernet Segment Identifier";
      type srl_nokia-comm:esi;
    }
    container label1 {
      description
        "The encoded label1 value (used for layer 2 services) and type in the EVPN NLRI";
      leaf value {
        description
          "The value of the label field

           If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
           If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
           an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
           value if transposition is used.";
        type uint32 {
          range "0..16777215";
        }
      }
      leaf value-type {
        description
          "Whether the encoded label value is an mpls-label, a vni or a transposed function or argument";
        type label-type;
      }
    }
    container label2 {
      description
        "The encoded label2 value (used for layer 3 services) and type in the EVPN NLRI";
      leaf value {
        description
          "The value of the label field

           If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
           If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
           an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
           value if transposition is used.";
        type uint32 {
          range "0..16777215";
        }
      }
      leaf value-type {
        description
          "Whether the encoded label value is an mpls-label, a vni or a transposed function or argument";
        type label-type;
      }
    }
    leaf attr-id {
      description
        "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
      type leafref {
        path "/srl_nokia-netinst:network-instance/srl_nokia-rib-bgp-routes:bgp-rib/srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
      }
    }
  }

  grouping evpn-imet-common {
    leaf route-distinguisher {
      description
        "The route distinguisher encoded in the NLRI";
      type srl_nokia-comm:route-distinguisher;
    }
    leaf originating-router {
      description
        "The IPv4 or IPv6 address of the originating router";
      type srl_nokia-comm:ip-address;
    }
    leaf ethernet-tag-id {
      description
        "The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain";
      type uint32;
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf attr-id {
      description
        "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
      type leafref {
        path "/srl_nokia-netinst:network-instance/srl_nokia-rib-bgp-routes:bgp-rib/srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
      }
    }
  }

  grouping evpn-es-common {
    leaf route-distinguisher {
      description
        "The route distinguisher encoded in the NLRI";
      type srl_nokia-comm:route-distinguisher;
    }
    leaf esi {
      description
        "The Ethernet Segment Identifier";
      type srl_nokia-comm:esi;
    }
    leaf originating-router {
      description
        "The IPv4 or IPv6 address of the originating router";
      type srl_nokia-comm:ip-address;
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf attr-id {
      description
        "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
      type leafref {
        path "/srl_nokia-netinst:network-instance/srl_nokia-rib-bgp-routes:bgp-rib/srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
      }
    }
  }

  grouping evpn-ip-common {
    leaf route-distinguisher {
      description
        "The route distinguisher encoded in the NLRI";
      type srl_nokia-comm:route-distinguisher;
    }
    leaf ethernet-tag-id {
      description
        "The 32-bit Ethernet Tag ID encoded in the NLRI. The Ethernet Tag ID identifies a broadcast domain";
      type uint32;
    }
    leaf ip-prefix-length {
      description
        "IP prefix length";
      type uint8 {
        range "0..128";
      }
      units "bits";
    }
    leaf ip-prefix {
      description
        "The IPv4 or IPv6 prefix";
      type srl_nokia-comm:ip-prefix;
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf esi {
      description
        "The Ethernet Segment Identifier";
      type srl_nokia-comm:esi;
    }
    leaf gateway-ip {
      description
        "An IP address that encodes an overlay index";
      type srl_nokia-comm:ip-address;
    }
    container label {
      description
        "The encoded label value and type in the EVPN NLRI";
      leaf value {
        description
          "The value of the label field

           If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
           If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
           an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
           value if transposition is used.";
        type uint32 {
          range "0..16777215";
        }
      }
      leaf value-type {
        description
          "Whether the encoded label value is an mpls-label, a vni or a transposed function or argument";
        type label-type;
      }
    }
    leaf attr-id {
      description
        "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
      type leafref {
        path "/srl_nokia-netinst:network-instance/srl_nokia-rib-bgp-routes:bgp-rib/srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
      }
    }
  }

  grouping evpn-smet-common {
    leaf route-distinguisher {
      description
        "The route distinguisher encoded in the NLRI";
      type srl_nokia-comm:route-distinguisher;
    }
    leaf ethernet-tag-id {
      description
        "The 32-bit Ethernet Tag ID encoded in the NLRI

         The Ethernet Tag ID identifies a broadcast domain";
      type uint32;
    }
    leaf multicast-source-length {
      description
        "The multicast source address length";
      type uint8 {
        range "0..128";
      }
      units "bits";
    }
    leaf multicast-source-address {
      description
        "The multicast source IP address";
      type srl_nokia-comm:ip-address;
    }
    leaf multicast-group-length {
      description
        "The multicast group address length";
      type uint8 {
        range "0..128";
      }
      units "bits";
    }
    leaf multicast-group-address {
      description
        "The multicast group IP address";
      type srl_nokia-comm:ip-address;
    }
    leaf originating-router {
      description
        "The IPv4 or IPv6 address of the originating router";
      type srl_nokia-comm:ip-address;
    }
    container flags {
      description
        "The SMET route Flags field in the NLRI";
      leaf igmp-mld-version-1 {
        description
          "When set to true, it indicates version 1

           When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
           to MLD version 1.";
        type boolean;
      }
      leaf igmp-mld-version-2 {
        description
          "When set to true, it indicates version 2

           When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
           to MLD version 2.";
        type boolean;
      }
      leaf igmp-version-3 {
        description
          "When set to true, it indicates version 3

           When the route is used for IPv4, it refers to IGMP version 3";
        type boolean;
      }
      leaf include-exclude-group-type {
        description
          "The Include/Exclude Group type bit

           Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.";
        type enumeration {
          enum 0;
          enum 1;
        }
      }
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf attr-id {
      description
        "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
      type leafref {
        path "/srl_nokia-netinst:network-instance/srl_nokia-rib-bgp-routes:bgp-rib/srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
      }
    }
  }

  grouping evpn-multicast-membership-report-synch-common {
    leaf route-distinguisher {
      description
        "The route distinguisher encoded in the NLRI";
      type srl_nokia-comm:route-distinguisher;
    }
    leaf esi {
      description
        "The Ethernet Segment Identifier";
      type srl_nokia-comm:esi;
    }
    leaf ethernet-tag-id {
      description
        "The 32-bit Ethernet Tag ID encoded in the NLRI

         The Ethernet Tag ID identifies a broadcast domain.";
      type uint32;
    }
    leaf multicast-source-length {
      description
        "The multicast source address length";
      type uint8 {
        range "0..128";
      }
      units "bits";
    }
    leaf multicast-source-address {
      description
        "The multicast source IP address";
      type srl_nokia-comm:ip-address;
    }
    leaf multicast-group-length {
      description
        "The multicast group address length";
      type uint8 {
        range "0..128";
      }
      units "bits";
    }
    leaf multicast-group-address {
      description
        "The multicast group IP address";
      type srl_nokia-comm:ip-address;
    }
    leaf originating-router {
      description
        "The IPv4 or IPv6 address of the originating router";
      type srl_nokia-comm:ip-address;
    }
    container flags {
      description
        "The Multicast Membership Report Synch route Flags field in the NLRI";
      leaf igmp-mld-version-1 {
        description
          "When set to true, it indicates version 1

           When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
           to MLD version 1.";
        type boolean;
      }
      leaf igmp-mld-version-2 {
        description
          "When set to true, it indicates version 2

           When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
           to MLD version 2.";
        type boolean;
      }
      leaf igmp-version-3 {
        description
          "When set to true, it indicates version 3

           When the route is used for IPv4, it refers to IGMP version 3.";
        type boolean;
      }
      leaf include-exclude-group-type {
        description
          "The Include/Exclude Group type bit

           Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.";
        type enumeration {
          enum 0;
          enum 1;
        }
      }
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf attr-id {
      description
        "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
      type leafref {
        path "/srl_nokia-netinst:network-instance/srl_nokia-rib-bgp-routes:bgp-rib/srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
      }
    }
  }

  grouping evpn-multicast-leave-synch-common {
    leaf route-distinguisher {
      description
        "The route distinguisher encoded in the NLRI";
      type srl_nokia-comm:route-distinguisher;
    }
    leaf esi {
      description
        "The Ethernet Segment Identifier";
      type srl_nokia-comm:esi;
    }
    leaf ethernet-tag-id {
      description
        "The 32-bit Ethernet Tag ID encoded in the NLRI

         The Ethernet Tag ID identifies a broadcast domain.";
      type uint32;
    }
    leaf multicast-source-length {
      description
        "The multicast source address length";
      type uint8 {
        range "0..128";
      }
      units "bits";
    }
    leaf multicast-source-address {
      description
        "The multicast source IP address";
      type srl_nokia-comm:ip-address;
    }
    leaf multicast-group-length {
      description
        "The multicast group address length";
      type uint8 {
        range "0..128";
      }
      units "bits";
    }
    leaf multicast-group-address {
      description
        "The multicast group IP address";
      type srl_nokia-comm:ip-address;
    }
    leaf originating-router {
      description
        "The IPv4 or IPv6 address of the originating router";
      type srl_nokia-comm:ip-address;
    }
    leaf maximum-response-time {
      description
        "The value to be used while sending a query";
      type uint8;
      units "deciseconds";
    }
    container flags {
      description
        "The Multicast Membership Report Synch route Flags field in the NLRI";
      leaf igmp-mld-version-1 {
        description
          "When set to true, it indicates version 1

           When the route is used for IPv4, it refers to IGMP version 1. When used for IPv6, it refers
           to MLD version 1.";
        type boolean;
      }
      leaf igmp-mld-version-2 {
        description
          "When set to true, it indicates version 2

           When the route is used for IPv4, it refers to IGMP version 2. When used for IPv6, it refers
           to MLD version 2.";
        type boolean;
      }
      leaf igmp-version-3 {
        description
          "When set to true, it indicates version 3

           When the route is used for IPv4, it refers to IGMP version 3.";
        type boolean;
      }
      leaf include-exclude-group-type {
        description
          "The Include/Exclude Group type bit

           Value 0 indicates Include Group type, and value 1 indicates Exclude Group type.";
        type enumeration {
          enum 0;
          enum 1;
        }
      }
    }
    leaf neighbor {
      description
        "If the route was learned from a BGP neighbor, this is the IPv4 or IPv6 address of that neighbor";
      type srl_nokia-comm:ip-address-with-zone;
    }
    leaf attr-id {
      description
        "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
      type leafref {
        path "/srl_nokia-netinst:network-instance/srl_nokia-rib-bgp-routes:bgp-rib/srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
      }
    }
  }

  grouping bgp-rib-top {
    container bgp-rib {
      config false;
      description
        "Container for BGP RIB state";
      list afi-safi {
        key "afi-safi-name";
        description
          "List of address families with routes in the BGP RIB";
        leaf afi-safi-name {
          type identityref {
            base srl_nokia-comm:bgp-address-family;
          }
          description
            "The name of the address family";
        }
        container ipv4-unicast {
          description
            "Container for RIB state of IPv4-unicast routes";
          container local-rib {
            description
              "Container for local RIB, containing all imported routes from other protocols plus the post-import-policy version of all IPv4 routes learned from all BGP neighbors";
            list route {
              key "prefix neighbor origin-protocol path-id";
              description
                "List of IPv4 routes in the local RIB";
              uses state-common-local-rib-key;
              uses state-routes-common;
              leaf attr-id {
                description
                  "Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index";
                type leafref {
                  path "../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                }
              }
            }
          }
          container rib-in-out {
            description
              "Container for BGP routes learned and advertised to BGP neighbors";
            container rib-in-pre {
              description
                "Container for the pre-import-policy version of BGP routes learned from BGP neighbors";
              list route {
                key "prefix neighbor path-id";
                description
                  "List of IPv4 routes";
                uses state-common-key;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
            container rib-in-post {
              description
                "Container for the post-import-policy version of BGP routes learned from BGP neighbors";
              list route {
                description
                  "List of IPv4 routes";
                key "prefix neighbor path-id";
                uses state-common-key;
                uses state-routes-common;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
                uses srl_nokia-rt:internal-tags;
              }
            }
            container rib-out-post {
              description
                "Container for the post-export-policy version of BGP routes advertised to BGP neighbors";
              list route {
                key "prefix neighbor path-id";
                description
                  "List of IPv4 routes";
                uses state-common-key;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/
                     attr-sets/attr-set/index";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
          }
        }
        container ipv4-labeled-unicast {
          if-feature "srl-feat:bgp-labeled-unicast";
          description
            "Container for RIB state of labeled IPv4-unicast routes";
          container local-rib {
            description
              "Container for local RIB, containing all imported routes from other protocols plus the post-import-policy version of all label-IPv4 routes learned from all BGP neighbors";
            list route {
              key "prefix neighbor origin-protocol path-id";
              description
                "List of label-IPv4 routes in the local RIB";
              uses state-common-local-rib-key;
              uses state-routes-common;
              leaf-list received-mpls-label {
                max-elements 1;
                description
                  "Received MPLS label value";
                type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
              }
              leaf attr-id {
                description
                  "Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index";
                type leafref {
                  path "../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                }
              }
            }
          }
          container rib-in-out {
            description
              "Container for BGP routes learned and advertised to BGP neighbors";
            container rib-in-pre {
              description
                "Container for the pre-import-policy version of BGP routes learned from BGP neighbors";
              list route {
                key "prefix neighbor path-id";
                description
                  "List of IPv4 routes";
                uses state-common-key;
                leaf-list received-mpls-label {
                  max-elements 1;
                  description
                    "Received MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
            container rib-in-post {
              description
                "Container for the post-import-policy version of BGP routes learned from BGP neighbors";
              list route {
                description
                  "List of IPv4 routes";
                key "prefix neighbor path-id";
                uses state-common-key;
                uses state-routes-common;
                leaf-list received-mpls-label {
                  max-elements 1;
                  description
                    "Received MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/
                     attr-sets/attr-set/index";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
                uses srl_nokia-rt:internal-tags;
              }
            }
            container rib-out-post {
              description
                "Container for the post-export-policy version of BGP routes advertised to BGP neighbors.";
              list route {
                key "prefix neighbor path-id";
                description
                  "List of IPv4 routes.";
                uses state-common-key;
                leaf-list advertised-mpls-label {
                  max-elements 1;
                  description
                    "Advertised MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
          }
        }
        container l3vpn-ipv4-unicast {
          if-feature "srl-feat:ipvpn";
          description
            "Container for RIB state of VPN-IPv4 unicast routes.";
          container local-rib {
            description
              "Container for local RIB

               Includes the post import-policy RIB-INs corresponding to VPN-IPv4 routes received from default net-instance BGP peers (post import-policy means after processing by the BGP import policy attached to the default net-instance peer and after processing by the vrf-import policy of importing IP VRF network instances) plus the post vrf-export policy “imported” routes from local IP-VRF network instances.";
            list route {
              key "route-distinguisher prefix neighbor path-id";
              description
                "List of VPN-IPv4 unicast routes in the local RIB.";
              leaf route-distinguisher {
                description
                  "The route distinguisher encoded in the NLRI.";
                type srl_nokia-comm:route-distinguisher;
              }
              uses state-common-key;
              uses state-routes-common;
              leaf-list imported-ip-vrf-network-instances {
                description
                  "List of IP-VRF network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              leaf-list received-mpls-label {
                max-elements 1;
                description
                  "Received MPLS label value";
                type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
              }
              leaf attr-id {
                description
                  "Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index";
                type leafref {
                  path "../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                }
              }
            }
          }
          container rib-in-out {
            description
              "Container for BGP routes learned and advertised to BGP neighbors.";
            container rib-in-pre {
              description
                "Container for the pre-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                key "route-distinguisher prefix neighbor path-id";
                description
                  "List of VPN-IPv4 unicast routes learned from BGP neighbors.";
                leaf route-distinguisher {
                  description
                    "The route distinguisher encoded in the NLRI.";
                  type srl_nokia-comm:route-distinguisher;
                }
                uses state-common-key;
                leaf-list imported-ip-vrf-network-instances {
                  description
                    "List of IP-VRF network instances that imported the route";
                  type leafref {
                    path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                  }
                }
                leaf-list received-mpls-label {
                  max-elements 1;
                  description
                    "Received MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
            container rib-in-post {
              description
                "Container for the post-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                key "route-distinguisher prefix neighbor path-id";
                description
                  "List of VPN-IPv4 unicast routes";
                leaf route-distinguisher {
                  description
                    "The route distinguisher encoded in the NLRI.";
                  type srl_nokia-comm:route-distinguisher;
                }
                uses state-common-key;
                uses state-routes-common;
                leaf-list imported-ip-vrf-network-instances {
                  description
                    "List of IP-VRF network instances that imported the route";
                  type leafref {
                    path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                  }
                }
                leaf-list received-mpls-label {
                  max-elements 1;
                  description
                    "Received MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/
                     attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
                uses srl_nokia-rt:internal-tags;
              }
            }
            container rib-out-post {
              description
                "Container for the post-export-policy version of BGP routes advertised to BGP neighbors.";
              list route {
                key "route-distinguisher prefix neighbor path-id";
                description
                  "List of VPN-IPv4 unicast routes.";
                leaf route-distinguisher {
                  description
                    "The route distinguisher encoded in the NLRI.";
                  type srl_nokia-comm:route-distinguisher;
                }
                uses state-common-key;
                leaf-list advertised-mpls-label {
                  max-elements 1;
                  description
                    "Advertised MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
          }
        }
        container l3vpn-ipv6-unicast {
          if-feature "srl-feat:ipvpn";
          description
            "Container for RIB state of VPN-IPv6 unicast routes.";
          container local-rib {
            description
              "Container for local RIB

               Includes the post import-policy RIB-INs corresponding to VPN-IPv6 routes received from default net-instance BGP peers (post import-policy means after processing by the BGP import policy attached to the default net-instance peer and after processing by the vrf-import policy of importing IP VRF network instances) plus the post vrf-export policy “imported” routes from local IP-VRF network instances.";
            list route {
              key "route-distinguisher prefix neighbor path-id";
              description
                "List of VPN-IPv6 unicast routes in the local RIB.";
              leaf route-distinguisher {
                description
                  "The route distinguisher encoded in the NLRI.";
                type srl_nokia-comm:route-distinguisher;
              }
              uses state-common-key;
              uses state-routes-common;
              leaf-list imported-ip-vrf-network-instances {
                description
                  "List of IP-VRF network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              leaf-list received-mpls-label {
                max-elements 1;
                description
                  "Received MPLS label value";
                type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
              }
              leaf attr-id {
                description
                  "Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index";
                type leafref {
                  path "../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                }
              }
            }
          }
          container rib-in-out {
            description
              "Container for BGP routes learned and advertised to BGP neighbors.";
            container rib-in-pre {
              description
                "Container for the pre-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                key "route-distinguisher prefix neighbor path-id";
                description
                  "List of VPN-IPv6 unicast routes learned from BGP neighbors.";
                leaf route-distinguisher {
                  description
                    "The route distinguisher encoded in the NLRI.";
                  type srl_nokia-comm:route-distinguisher;
                }
                uses state-common-key;
                leaf-list imported-ip-vrf-network-instances {
                  description
                    "List of IP-VRF network instances that imported the route";
                  type leafref {
                    path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                  }
                }
                leaf-list received-mpls-label {
                  max-elements 1;
                  description
                    "Received MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
            container rib-in-post {
              description
                "Container for the post-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                key "route-distinguisher prefix neighbor path-id";
                description
                  "List of VPN-IPv6 unicast routes";
                leaf route-distinguisher {
                  description
                    "The route distinguisher encoded in the NLRI.";
                  type srl_nokia-comm:route-distinguisher;
                }
                uses state-common-key;
                uses state-routes-common;
                leaf-list imported-ip-vrf-network-instances {
                  description
                    "List of IP-VRF network instances that imported the route";
                  type leafref {
                    path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                  }
                }
                leaf-list received-mpls-label {
                  max-elements 1;
                  description
                    "Received MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/
                     attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
                uses srl_nokia-rt:internal-tags;
              }
            }
            container rib-out-post {
              description
                "Container for the post-export-policy version of BGP routes advertised to BGP neighbors.";
              list route {
                key "route-distinguisher prefix neighbor path-id";
                description
                  "List of VPN-IPv6 unicast routes.";
                leaf route-distinguisher {
                  description
                    "The route distinguisher encoded in the NLRI.";
                  type srl_nokia-comm:route-distinguisher;
                }
                uses state-common-key;
                leaf-list advertised-mpls-label {
                  max-elements 1;
                  description
                    "Advertised MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
          }
        }
        container ipv6-unicast {
          description
            "Container for RIB state of IPv6-unicast routes.";
          container local-rib {
            description
              "Container for local RIB, containing all imported routes from other protocols plus the post-import-policy version of all IPv4 routes learned from all BGP neighbors.";
            list route {
              key "prefix neighbor origin-protocol path-id";
              description
                "List of IPv6 routes in the local RIB.";
              uses state-common-local-rib-key;
              uses state-routes-common;
              leaf attr-id {
                description
                  "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index";
                type leafref {
                  path "../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                }
              }
            }
          }
          container rib-in-out {
            description
              "Container for BGP routes learned and advertised to BGP neighbors.";
            container rib-in-pre {
              description
                "Container for the pre-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                key "prefix neighbor path-id";
                description
                  "List of IPv6 routes.";
                uses state-common-key;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
            container rib-in-post {
              description
                "Container for the post-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                description
                  "List of IPv6 routes";
                key "prefix neighbor path-id";
                uses state-common-key;
                uses state-routes-common;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
                uses srl_nokia-rt:internal-tags;
              }
            }
            container rib-out-post {
              description
                "Container for the post-export-policy version of BGP routes advertised to BGP neighbors.";
              list route {
                key "prefix neighbor path-id";
                description
                  "List of IPv6 routes.";
                uses state-common-key;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
          }
        }
        container ipv6-labeled-unicast {
          if-feature "srl-feat:bgp-labeled-unicast";
          description
            "Container for RIB state of labeled IPv6-unicast routes.";
          container local-rib {
            description
              "Container for local RIB, containing all imported routes from other protocols plus the post-import-policy version of all label-IPv4 routes learned from all BGP neighbors.";
            list route {
              key "prefix neighbor origin-protocol path-id";
              description
                "List of label-IPv6 routes in the local RIB.";
              uses state-common-local-rib-key;
              uses state-routes-common;
              leaf-list received-mpls-label {
                max-elements 1;
                description
                  "Received MPLS label value";
                type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
              }
              leaf attr-id {
                description
                  "Leaf reference to networkinstance/bgp-rib/attr-sets/attr-set/index";
                type leafref {
                  path "../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                }
              }
            }
          }
          container rib-in-out {
            description
              "Container for BGP routes learned and advertised to BGP neighbors.";
            container rib-in-pre {
              description
                "Container for the pre-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                key "prefix neighbor path-id";
                description
                  "List of label-IPv6 routes.";
                uses state-common-key;
                leaf-list received-mpls-label {
                  max-elements 1;
                  description
                    "Received MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
            container rib-in-post {
              description
                "Container for the post-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                description
                  "List of label-IPv6 routes";
                key "prefix neighbor path-id";
                uses state-common-key;
                uses state-routes-common;
                leaf-list received-mpls-label {
                  max-elements 1;
                  description
                    "Received MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
                uses srl_nokia-rt:internal-tags;
              }
            }
            container rib-out-post {
              description
                "Container for the post-export-policy version of BGP routes advertised to BGP neighbors.";
              list route {
                key "prefix neighbor path-id";
                description
                  "List of label-IPv6 routes.";
                uses state-common-key;
                leaf-list advertised-mpls-label {
                  max-elements 1;
                  description
                    "Advertised MPLS label value";
                  type srl_nokia-comm:mpls-label-with-implicit-and-explicit-null;
                }
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
          }
        }
        container evpn {
          if-feature "srl-feat:bgp-rib-afi-safi-list-for-evpn";
          description
            "Container for RIB state of EVPN routes";
          container local-rib {
            description
              "Container for local RIB state of EVPN routes

               Includes the post import-policy RIB-INs corresponding to EVPN routes received from default net-instance BGP peers
               (post import-policy means after processing by the BGP import policy attached to the default net-instance peer and
               after processing by the vrf-import policy of importing network instances) plus the post vrf-export policy “imported”
               routes from local network instances.";
            list ethernet-ad-route {
              description
                "List of Ethernet AD (Auto-Discovery) routes";
              key "route-distinguisher esi ethernet-tag-id neighbor";
              uses evpn-ethernet-ad-common;
              uses state-routes-common;
              leaf-list imported-network-instances {
                description
                  "List of network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              uses srl_nokia-rt:internal-tags;
            }
            list mac-ip-route {
              description
                "List of Mac/IP Advertisement routes";
              key "route-distinguisher mac-length mac-address ip-address ethernet-tag-id neighbor";
              uses evpn-mac-ip-common;
              uses state-routes-common;
              leaf-list imported-network-instances {
                description
                  "List of network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              uses srl_nokia-rt:internal-tags;
            }
            list imet-route {
              description
                "List of Inclusive Multicast Ethernet Tag routes";
              key "route-distinguisher originating-router ethernet-tag-id neighbor";
              uses evpn-imet-common;
              uses state-routes-common;
              leaf-list imported-network-instances {
                description
                  "List of network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              uses srl_nokia-rt:internal-tags;
            }
            list ethernet-segment-route {
              description
                "List of Ethernet Segment routes";
              key "route-distinguisher esi originating-router neighbor";
              uses evpn-es-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
            list ip-prefix-route {
              description
                "List of IP prefix routes";
              key "route-distinguisher ethernet-tag-id ip-prefix-length ip-prefix neighbor";
              uses evpn-ip-common;
              uses state-routes-common;
              leaf-list imported-network-instances {
                description
                  "List of network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              uses srl_nokia-rt:internal-tags;
            }
            list smet-route {
              description
                "List of Selective Multicast Ethernet Tag routes";
              key "route-distinguisher ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-smet-common;
              uses state-routes-common;
              leaf-list imported-network-instances {
                description
                  "List of network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              uses srl_nokia-rt:internal-tags;
            }
            list multicast-membership-report-synch-route {
              description
                "List of Multicast Membership Report Synch routes";
              key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-multicast-membership-report-synch-common;
              uses state-routes-common;
              leaf-list imported-network-instances {
                description
                  "List of network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              uses srl_nokia-rt:internal-tags;
            }
            list multicast-leave-synch-route {
              description
                "List of Multicast Leave Synch routes";
              key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-multicast-leave-synch-common;
              uses state-routes-common;
              leaf-list imported-network-instances {
                description
                  "List of network instances that imported the route";
                type leafref {
                  path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
                }
              }
              uses srl_nokia-rt:internal-tags;
            }
          }
          container rib-in-out {
            description
              "Container for BGP routes learned and advertised to BGP neighbors";
            container rib-in-pre {
              description
                "Container for the pre-import-policy version of BGP routes learned from BGP neighbors.";
              list ethernet-ad-route {
                description
                  "List of Ethernet AD (Auto-Discovery) routes";
                key "route-distinguisher esi ethernet-tag-id neighbor";
                uses evpn-ethernet-ad-common;
              }
              list mac-ip-route {
                description
                  "List of Mac/IP Advertisement routes";
                key "route-distinguisher mac-length mac-address ip-address ethernet-tag-id neighbor";
                uses evpn-mac-ip-common;
              }
              list imet-route {
                description
                  "List of Inclusive Multicast Ethernet Tag routes";
                key "route-distinguisher originating-router ethernet-tag-id neighbor";
                uses evpn-imet-common;
              }
              list ethernet-segment-route {
                description
                  "List of Ethernet Segment routes";
                key "route-distinguisher esi originating-router neighbor";
                uses evpn-es-common;
              }
              list ip-prefix-route {
                description
                  "List of IP prefix routes";
                key "route-distinguisher ethernet-tag-id ip-prefix-length ip-prefix neighbor";
                uses evpn-ip-common;
              }
              list smet-route {
                description
                  "List of Selective Multicast Ethernet Tag routes";
                key "route-distinguisher ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-smet-common;
              }
              list multicast-membership-report-synch-route {
                description
                  "List of Multicast Membership Report Synch routes";
                key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-multicast-membership-report-synch-common;
              }
              list multicast-leave-synch-route {
                description
                  "List of Multicast Leave Synch routes";
                key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-multicast-leave-synch-common;
              }
            }
            container rib-in-post {
              description
                "Container for the post-import-policy version of BGP routes learned from BGP neighbors.";
              list ethernet-ad-route {
                description
                  "List of Ethernet AD (Auto-Discovery) routes";
                key "route-distinguisher esi ethernet-tag-id neighbor";
                uses evpn-ethernet-ad-common;
                uses state-routes-common;
                uses srl_nokia-rt:internal-tags;
              }
              list mac-ip-route {
                description
                  "List of Mac/IP Advertisement routes";
                key "route-distinguisher mac-length mac-address ip-address ethernet-tag-id neighbor";
                uses evpn-mac-ip-common;
                uses state-routes-common;
                uses srl_nokia-rt:internal-tags;
              }
              list imet-route {
                description
                  "List of Inclusive Multicast Ethernet Tag routes";
                key "route-distinguisher originating-router ethernet-tag-id neighbor";
                uses evpn-imet-common;
                uses state-routes-common;
                uses srl_nokia-rt:internal-tags;
              }
              list ethernet-segment-route {
                description
                  "List of Ethernet Segment routes";
                key "route-distinguisher esi originating-router neighbor";
                uses evpn-es-common;
                uses state-routes-common;
                uses srl_nokia-rt:internal-tags;
              }
              list ip-prefix-route {
                description
                  "List of IP prefix routes";
                key "route-distinguisher ethernet-tag-id ip-prefix-length ip-prefix neighbor";
                uses evpn-ip-common;
                uses state-routes-common;
                uses srl_nokia-rt:internal-tags;
              }
              list smet-route {
                description
                  "List of Selective Multicast Ethernet Tag routes";
                key "route-distinguisher ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-smet-common;
                uses state-routes-common;
                uses srl_nokia-rt:internal-tags;
              }
              list multicast-membership-report-synch-route {
                description
                  "List of Multicast Membership Report Synch routes";
                key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-multicast-membership-report-synch-common;
                uses state-routes-common;
                uses srl_nokia-rt:internal-tags;
              }
              list multicast-leave-synch-route {
                description
                  "List of Multicast Leave Synch routes";
                key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-multicast-leave-synch-common;
                uses state-routes-common;
                uses srl_nokia-rt:internal-tags;
              }
            }
            container rib-out-post {
              description
                "Container for the post-export-policy version of BGP routes advertised to BGP neighbors.";
              list ethernet-ad-route {
                description
                  "List of Ethernet AD (Auto-Discovery) routes";
                key "route-distinguisher esi ethernet-tag-id neighbor";
                uses evpn-ethernet-ad-common;
                leaf next-hop {
                  description
                    "The advertised BGP next-hop address.";
                  type srl_nokia-comm:ip-address;
                }
              }
              list mac-ip-route {
                description
                  "List of Mac/IP Advertisement routes";
                key "route-distinguisher mac-length mac-address ip-address ethernet-tag-id neighbor";
                uses evpn-mac-ip-common;
                leaf next-hop {
                  description
                    "The advertised BGP next-hop address.";
                  type srl_nokia-comm:ip-address;
                }
              }
              list imet-route {
                description
                  "List of Inclusive Multicast Ethernet Tag routes";
                key "route-distinguisher originating-router ethernet-tag-id neighbor";
                uses evpn-imet-common;
                leaf next-hop {
                  description
                    "The advertised BGP next-hop address.";
                  type srl_nokia-comm:ip-address;
                }
              }
              list ethernet-segment-route {
                description
                  "List of Ethernet Segment routes";
                key "route-distinguisher esi originating-router neighbor";
                uses evpn-es-common;
                leaf next-hop {
                  description
                    "The advertised BGP next-hop address.";
                  type srl_nokia-comm:ip-address;
                }
              }
              list ip-prefix-route {
                description
                  "List of IP prefix routes";
                key "route-distinguisher ethernet-tag-id ip-prefix-length ip-prefix neighbor";
                uses evpn-ip-common;
                leaf next-hop {
                  description
                    "The advertised BGP next-hop address.";
                  type srl_nokia-comm:ip-address;
                }
              }
              list smet-route {
                description
                  "List of Selective Multicast Ethernet Tag routes";
                key "route-distinguisher ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-smet-common;
                leaf next-hop {
                  description
                    "The advertised BGP next-hop address.";
                  type srl_nokia-comm:ip-address;
                }
              }
              list multicast-membership-report-synch-route {
                description
                  "List of Multicast Membership Report Synch routes";
                key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-multicast-membership-report-synch-common;
                leaf next-hop {
                  description
                    "The advertised BGP next-hop address.";
                  type srl_nokia-comm:ip-address;
                }
              }
              list multicast-leave-synch-route {
                description
                  "List of Multicast Leave Synch routes";
                key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
                uses evpn-multicast-leave-synch-common;
                leaf next-hop {
                  description
                    "The advertised BGP next-hop address.";
                  type srl_nokia-comm:ip-address;
                }
              }
            }
          }
        }
        container route-target {
          if-feature "srl-feat:bgp-rtc";
          description
            "Container for RIB state of RTC routes.";
          container rib-in-out {
            description
              "Container for BGP routes learned and advertised to BGP neighbors.";
            container rib-in-pre {
              description
                "Container for the pre-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                key "origin-as route-target-prefix neighbor path-id";
                description
                  "List of RTC routes in the RIB-IN, before import-policy modification.";
                uses rtc-key;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
            container rib-in-post {
              description
                "Container for the post-import-policy version of BGP routes learned from BGP neighbors.";
              list route {
                description
                  "List of RTC routes in the RIB-IN, after import-policy modification.";
                key "origin-as route-target-prefix neighbor path-id";
                uses rtc-key;
                uses state-routes-common;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/
                     attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
                uses srl_nokia-rt:internal-tags;
              }
            }
            container rib-out-post {
              description
                "Container for the post-export-policy version of BGP routes advertised to BGP neighbors.";
              list route {
                key "origin-as route-target-prefix neighbor path-id";
                description
                  "List of RTC routes in the RIB-OUT, after export-policy modification.";
                uses rtc-key;
                leaf attr-id {
                  description
                    "Leaf reference to networkinstance/protocols/bgp/rib/attr-sets/attr-set/index.";
                  type leafref {
                    path "../../../../../../srl_nokia-rib-bgp-routes:attr-sets/srl_nokia-rib-bgp-routes:attr-set/srl_nokia-rib-bgp-routes:index";
                  }
                }
              }
            }
          }
        }
      }
      container evpn {
        if-feature "not srl-feat:bgp-rib-afi-safi-list-for-evpn";
        description
          "Container for RIB state of EVPN routes.";
        container rib-in-out {
          description
            "Container for BGP routes learned and advertised to BGP neighbors.";
          container rib-in-pre {
            description
              "Container for the pre-import-policy version of BGP routes learned from BGP neighbors.";
            list ethernet-ad-routes {
              description
                "List of Ethernet AD (Auto-Discovery) routes";
              key "route-distinguisher esi ethernet-tag-id neighbor";
              uses evpn-ethernet-ad-common;
            }
            list mac-ip-routes {
              description
                "List of Mac/IP Advertisement routes";
              key "route-distinguisher mac-length mac-address ip-address ethernet-tag-id neighbor";
              uses evpn-mac-ip-common;
            }
            list imet-routes {
              description
                "List of Inclusive Multicast Ethernet Tag routes";
              key "route-distinguisher originating-router ethernet-tag-id neighbor";
              uses evpn-imet-common;
            }
            list ethernet-segment-routes {
              description
                "List of Ethernet Segment routes";
              key "route-distinguisher esi originating-router neighbor";
              uses evpn-es-common;
            }
            list ip-prefix-routes {
              description
                "List of IP prefix routes";
              key "route-distinguisher ethernet-tag-id ip-prefix-length ip-prefix neighbor";
              uses evpn-ip-common;
            }
            list smet-routes {
              description
                "List of Selective Multicast Ethernet Tag routes";
              key "route-distinguisher ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-smet-common;
            }
            list multicast-membership-report-synch-routes {
              description
                "List of Multicast Membership Report Synch routes";
              key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-multicast-membership-report-synch-common;
            }
            list multicast-leave-synch-routes {
              description
                "List of Multicast Leave Synch routes";
              key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-multicast-leave-synch-common;
            }
          }
          container rib-in-post {
            description
              "Container for the post-import-policy version of BGP routes learned from BGP neighbors.";
            list ethernet-ad-routes {
              description
                "List of Ethernet AD (Auto-Discovery) routes";
              key "route-distinguisher esi ethernet-tag-id neighbor";
              uses evpn-ethernet-ad-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
            list mac-ip-routes {
              description
                "List of Mac/IP Advertisement routes";
              key "route-distinguisher mac-length mac-address ip-address ethernet-tag-id neighbor";
              uses evpn-mac-ip-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
            list imet-routes {
              description
                "List of Inclusive Multicast Ethernet Tag routes";
              key "route-distinguisher originating-router ethernet-tag-id neighbor";
              uses evpn-imet-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
            list ethernet-segment-routes {
              description
                "List of Ethernet Segment routes";
              key "route-distinguisher esi originating-router neighbor";
              uses evpn-es-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
            list ip-prefix-routes {
              description
                "List of IP prefix routes";
              key "route-distinguisher ethernet-tag-id ip-prefix-length ip-prefix neighbor";
              uses evpn-ip-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
            list smet-routes {
              description
                "List of Selective Multicast Ethernet Tag routes";
              key "route-distinguisher ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-smet-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
            list multicast-membership-report-synch-routes {
              description
                "List of Multicast Membership Report Synch routes";
              key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-multicast-membership-report-synch-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
            list multicast-leave-synch-routes {
              description
                "List of Multicast Leave Synch routes";
              key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-multicast-leave-synch-common;
              uses state-routes-common;
              uses srl_nokia-rt:internal-tags;
            }
          }
          container rib-out-post {
            description
              "Container for the post-export-policy version of BGP routes advertised to BGP neighbors.";
            list ethernet-ad-routes {
              description
                "List of Ethernet AD (Auto-Discovery) routes";
              key "route-distinguisher esi ethernet-tag-id neighbor";
              uses evpn-ethernet-ad-common;
              leaf next-hop {
                description
                  "The advertised BGP next-hop address.";
                type srl_nokia-comm:ip-address;
              }
            }
            list mac-ip-routes {
              description
                "List of Mac/IP Advertisement routes";
              key "route-distinguisher mac-length mac-address ip-address ethernet-tag-id neighbor";
              uses evpn-mac-ip-common;
              leaf next-hop {
                description
                  "The advertised BGP next-hop address.";
                type srl_nokia-comm:ip-address;
              }
            }
            list imet-routes {
              description
                "List of Inclusive Multicast Ethernet Tag routes";
              key "route-distinguisher originating-router ethernet-tag-id neighbor";
              uses evpn-imet-common;
              leaf next-hop {
                description
                  "The advertised BGP next-hop address.";
                type srl_nokia-comm:ip-address;
              }
            }
            list ethernet-segment-routes {
              description
                "List of Ethernet Segment routes";
              key "route-distinguisher esi originating-router neighbor";
              uses evpn-es-common;
              leaf next-hop {
                description
                  "The advertised BGP next-hop address.";
                type srl_nokia-comm:ip-address;
              }
            }
            list ip-prefix-routes {
              description
                "List of IP prefix routes";
              key "route-distinguisher ethernet-tag-id ip-prefix-length ip-prefix neighbor";
              uses evpn-ip-common;
              leaf next-hop {
                description
                  "The advertised BGP next-hop address.";
                type srl_nokia-comm:ip-address;
              }
            }
            list smet-routes {
              description
                "List of Selective Multicast Ethernet Tag routes";
              key "route-distinguisher ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-smet-common;
              leaf next-hop {
                description
                  "The advertised BGP next-hop address.";
                type srl_nokia-comm:ip-address;
              }
            }
            list multicast-membership-report-synch-routes {
              description
                "List of Multicast Membership Report Synch routes";
              key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-multicast-membership-report-synch-common;
              leaf next-hop {
                description
                  "The advertised BGP next-hop address.";
                type srl_nokia-comm:ip-address;
              }
            }
            list multicast-leave-synch-routes {
              description
                "List of Multicast Leave Synch routes";
              key "route-distinguisher esi ethernet-tag-id multicast-source-length multicast-source-address multicast-group-length multicast-group-address originating-router neighbor";
              uses evpn-multicast-leave-synch-common;
              leaf next-hop {
                description
                  "The advertised BGP next-hop address.";
                type srl_nokia-comm:ip-address;
              }
            }
          }
        }
      }
      container attr-sets {
        description
          "Container for BGP RIB path attribute sets that can be shared by one or more
           BGP routes.";
        list attr-set {
          description
            "List of attribute sets.";
          key "index";
          leaf index {
            description
              "A unique internal identifier of the attribute set.";
            type uint64;
          }
          container as-path {
            description
              "A container for the AS path attribute of the attribute set.";
            list segment {
              description
                "A list of segments. Each segment has a type and a list of one or more AS
                 numbers.";
              key "as-path-index";
              leaf as-path-index {
                description
                  "RIB attribute AS Path index";
                type uint32;
              }
              leaf type {
                description
                  "The type of the AS path segment.";
                type enumeration {
                  enum as-set;
                  enum as-sequence;
                  enum as-confed-sequence;
                  enum as-confed-set;
                }
              }
              leaf-list member {
                description
                  "A list of AS numbers (each of which is a 2byte-ASN or a 4byte-ASN) that belong
                   to the AS path segment.";
                type uint32;
                ordered-by user;
              }
            }
          }
          leaf origin {
            description
              "The value of the ORIGIN path attribute";
            type enumeration {
              enum igp;
              enum egp;
              enum incomplete;
            }
          }
          leaf atomic-aggregate {
            description
              "Set to true to indicate the presence of the ATOMIC_AGGREGATE path attribute.";
            type boolean;
          }
          leaf next-hop {
            description
              "The IPv4 or IPv6 address of the BGP next-hop (extracted from the
               NEXT_HOP field of the UPDATE or the MP_REACH_NLRI next-hop).";
            type srl_nokia-comm:ip-address-with-zone;
          }
          leaf med {
            description
              "The value of the MULTI_EXIT_DISC path attribute.";
            type uint32;
          }
          leaf local-pref {
            description
              "The value of the LOCAL_PREF path attribute.";
            type uint32;
          }
          leaf originator-id {
            description
              "The address in the ORIGINATOR_ID attribute added by a route reflector.";
            type srl_nokia-comm:ip-address;
          }
          leaf-list cluster-list {
            description
              "The list of IPv4 addresses in the CLUSTER_LIST path attribute.";
            type srl_nokia-comm:ip-address;
            ordered-by user;
          }
          leaf aigp {
            description
              "The value in the AIGP path attribute.";
            type uint64;
          }
          container aggregator {
            description
              "";
            leaf as-number {
              description
                "The 2byte or 4byte AS number of the router that formed the aggregate
                 route.";
              type uint32 {
                range "1..4294967295";
              }
            }
            leaf address {
              description
                "The router ID of the BGP router that formed the aggregate route.";
              type srl_nokia-comm:ip-address;
            }
          }
          container pmsi-tunnel {
            description
              "A container for the Provider Multicast Service Interface Tunnel Attribute (PTA) of the attribute set.";
            leaf tunnel-type {
              description
                "The value of the tunnel-type in the PMSI Tunnel Attribute";
              type enumeration {
                enum no-tunnel;
                enum rsvp-te-p2mp;
                enum mldp-p2mp;
                enum pim-ssm;
                enum pim-sm;
                enum bidir-pim;
                enum ingress-replication;
                enum mldp-mp2mp;
                enum assisted-replication;
                enum bier;
              }
            }
            container flags {
              description
                "A container for the PTA Flags";
              leaf assisted-replication-type {
                description
                  "The value of the assisted-replication role type.";
                type enumeration {
                  enum none;
                  enum ar-replicator;
                  enum ar-leaf;
                  enum reserved;
                }
              }
              container pruned-flood-list {
                description
                  "A container for the optimized ingress replication pruned flood list flags.";
                leaf broadcast-multicast {
                  description
                    "The value of the broadcast-multicast flag.";
                  type enumeration {
                    enum 0;
                    enum 1;
                  }
                }
                leaf unknown-unicast {
                  description
                    "The value of the unknown-unicast flag.";
                  type enumeration {
                    enum 0;
                    enum 1;
                  }
                }
              }
              leaf leaf-information-required {
                description
                  "The value of the Leaf Information Required (LIR) flag.";
                type boolean;
              }
            }
            container label {
              description
                "The encoded label value and type in the PMSI Tunnel Attribute";
              leaf value {
                description
                  "The value of the label field

                   If the route is an EVPN MPLS route, the mpls-label is read out of the 20-bit high order value.
                   If the route is an EVPN VXLAN route, the vni is read out of the 24-bit value. If the route is
                   an EVPN SRv6 route, this field is set to zero if no transposition is used and set to a non-zero
                   value if transposition is used.";
                type uint32 {
                  range "0..16777215";
                }
              }
              leaf value-type {
                description
                  "Whether the encoded label value is an mpls-label, a vni or a transposed function or argument";
                type label-type;
              }
            }
            leaf tunnel-endpoint {
              description
                "The value of the tunnel-endpoint in the PMSI Tunnel Attribute.";
              type srl_nokia-comm:ip-address;
            }
          }
          container communities {
            description
              "Container for different types of BGP communities";
            leaf-list community {
              description
                "List of standard 4-byte community values in the COMMUNITY path
                 attribute. Each should be displayed in the format <0..65355>:<0..65535>";
              type string;
              ordered-by user;
            }
            leaf-list ext-community {
              description
                "List of extended 8-byte community values in the COMMUNITY path
                 attribute.";
              type string;
              ordered-by user;
            }
            leaf-list large-community {
              description
                "List of large 12-byte community values in the LARGE_COMMUNITY path
                 attribute. Each should be displayed in the format: <0..4294967295>:<0..4294967295>:<
                 0..4294967295>";
              type string {
                length "1..72";
              }
              ordered-by user;
            }
          }
          container prefix-sid {
            if-feature "srl-feat:bgp-labeled-unicast-prefix-sid";
            description
              "This container defines Prefix SID TLVs";
            list tlv {
              key "type";
              description
                "List of TLV types in the LSDB for the specified LSP.";
              leaf type {
                type identityref {
                  base prefix-sid-tlv-type;
                }
                description
                  "The type of TLV being described. The type of TLV is expressed as a canonical name.";
              }
              container label-index {
                when "../type = 'label-index'";
                description
                  "This container defines TLV 1.";
                leaf label-index {
                  type uint32;
                  description
                    "32-bit value representing the index value in the SRGB space";
                }
              }
              container srgb-originator {
                when "../type = 'srgb-originator'";
                description
                  "This container defines TLV 3.";
                leaf-list srgb {
                  description
                    "List of SRGB ranges, each in the format <first-label>:<number-of-labels>";
                  type string {
                    pattern '[0-9]+:[0-9]+';
                  }
                }
              }
            }
          }
          container unknown-attributes {
            description
              "Container for unknown path attributes";
            list unknown-attribute {
              description
                "List of unknown BGP path attributes";
              key "unknown-attr-index";
              leaf unknown-attr-index {
                description
                  "RIB attribute unknown attribute index";
                type uint32;
              }
              leaf attr-type {
                description
                  "The type code of the unknown path
                   attribute";
                type uint8;
              }
              leaf attr-len {
                description
                  "The length of the unknown path
                   attribute";
                type uint16;
              }
              leaf optional {
                description
                  "Set to true if the unknown path
                   attribute has the optional flag is set to
                   1.";
                type boolean;
              }
              leaf transitive {
                description
                  "Set to true if the unknown path
                   attribute has the transitive flag is set to
                   1.";
                type boolean;
              }
              leaf partial {
                description
                  "Set to true if the unknown path
                   attribute has the partial flag is set to 1.";
                type boolean;
              }
              leaf extended {
                description
                  "Set to true if the unknown path attribute has the extended length flag
                   is set to 1.";
                type boolean;
              }
            }
          }
        }
      }
    }
  }

  augment "/srl_nokia-netinst:network-instance" {
    uses bgp-rib-top;
  }
}
