module srl_nokia-sync-ptp {
  yang-version 1.1;
  namespace "urn:srl_nokia/sync-ptp";
  prefix srl_nokia-sync-ptp;

  import srl_nokia-common {
    prefix srl_nokia-comm;
  }
  import srl_nokia-features {
    prefix srl_nokia-feat;
  }
  import srl_nokia-sync-types {
    prefix srl_nokia-sync-types;
  }
  import srl_nokia-network-instance {
    prefix srl_nokia-netinst; 
  }

  organization
    "Nokia";
  contact
    "Nokia SR Linux Support
     Web: <http://www.nokia.com>";

  revision 2023-07-31 {
    description
      "SRLinux 23.7.1";
  }
  revision 2023-03-31 {
    description
      "SRLinux 23.3.1";
  }
  revision 2022-11-30 {
    description
      "SRLinux 22.11.1";
  }
  revision 2022-06-30 {
    description
      "SRLinux 22.6.1";
  }
  revision 2022-03-31 {
    description
      "SRLinux 22.3.1";
  }
  revision 2021-11-30 {
    description
      "SRLinux 21.11.1";
  }

  identity network-protocol {
      description
        "Enumeration for the protocol used by a PTP instance to transport PTP messages

        YANG identity is used so that a PTP Profile's YANG augment
        can assign values, using numeric range F000 to FFFD hex.";
      reference
        "7.4.1 of IEEE Std 1588-2019";
  }
    identity udp-ipv4 {
      base network-protocol;
      description
        "UDP on IPv4. Numeric value is 0001 hex";
    }
    identity udp-ipv6 {
      base network-protocol;
      description
        "UDP on IPv6. Numeric value is 0002 hex";
    }
    identity ieee802-3 {
      base network-protocol;
      description
        "IEEE Std 802.3 (Ethernet). Numeric value is 0003 hex";
    }
    identity devicenet {
      base network-protocol;
      description
        "DeviceNet. Numeric value is 0004 hex";
    }
    identity controlnet {
      base network-protocol;
      description
        "ControlNet. Numeric value is 0005 hex";
    }
    identity profinet {
      base network-protocol;
      description
        "PROFINET. Numeric value is 0006 hex";
    }
    identity otn {
      base network-protocol;
      description
        "Optical Transport Network (OTN). Numeric value is 0007 hex";
    }
    identity unknown {
      base network-protocol;
      description
        "Unknown. Numeric value is FFFE hex";
    }

  grouping clock-quality-grouping {
    description
      "Quality of a PTP instance

       This contains IEEE Std 1588 clockClass, clockAccuracy and offsetScaledLogVariance.";    
    leaf clock-class {
      type uint8;
      config false;
      description
        "The clockClass denotes the traceability of the time or frequency distributed by the clock";
    }
    leaf clock-accuracy {
      type uint8;
      config false;
      description
        "The clockAccuracy indicates the expected accuracy of the clock";
    }
    leaf offset-scaled-log-variance {
      type uint16;
      config false;
      description
        "The offsetScaledLogVariance provides an estimate of the variations of the clock";
    }
  }

  grouping ptp-time-grouping {
    description
      "Recovered PTP time, including seconds and nanoseconds";
    leaf time-seconds {
      type srl_nokia-sync-types:time-seconds-type;
      config false;
      description
        "Seconds of time";
    }
    leaf time-nano-seconds {
      type srl_nokia-sync-types:time-nanoseconds-type;
      config false;
      description
        "Nano-seconds of time";
    }
  }

  grouping port-address {
     description
      "The IEEE Std 1588 PortAddress type represents the protocol address of a PTP Port";       
    
    leaf network-protocol {
      type identityref {
        base network-protocol;
      }
      description
        "Protocol used by a PTP instance to transport PTP messages";
    }
    leaf mac-address {
      type srl_nokia-comm:mac-address;
      description
          "The MAC address of the PTP port

           This is only valid for PTP over ethernet encapsulation.";
    }
    container ip {
      if-feature "srl_nokia-feat:sync-ptp-ip-peers";
      must '(../network-protocol = "udp-ipv4") or (../network-protocol = "udp-ipv6")' {
        error-message "host-address is only relevant for PTP over UDP/IPv4 or UDP/IPv6";
      }
      leaf network-instance {
        type leafref {
          path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
        }
        description
          "Network instance containing the host or IP address";
      }
      leaf host {
        type srl_nokia-comm:host;
        description
          "IP address or DNS domain name for the PTP peer";
      }
    }
  }
  grouping ptp-message-counts {
    leaf anno-msg-tx {
      type uint32;
      description
        "Specifies the number of announce messages transmitted";
    } 
    leaf anno-msg-rx {
      type uint32;
      description
        "Specifies the number of announce messages received";
    }
    leaf sync-msg-tx {
      type uint32;
      description
        "Specifies the number of sync messages transmitted";
    }
    leaf sync-msg-rx {
      type uint32;
      description
        "Specifies the number of sync messages received";
    }
    leaf del-req-msg-tx {
      type uint32;
      description
        "Specifies the number of delay-req messages transmitted";
    }
    leaf del-req-msg-rx {
      type uint32;
      description
        "Specifies the number of delay-req messages received";
    }
    leaf del-resp-msg-tx {
      type uint32;
      description
        "Specifies the number of delay-resp messages transmitted";
    }
    leaf del-resp-msg-rx {
      type uint32;
      description
        "Specifies the number of delay-resp messages received";
    }
    leaf follow-up-msg-tx {
      type uint32;
      description
        "Specifies the number of follow-up messages transmitted";
    }
    leaf follow-up-msg-rx {
      type uint32;
      description
        "Specifies the number of follow-up messages received";
    }
    leaf signaling-msg-tx {
      if-feature "srl_nokia-feat:sync-ptp-ip-peers";
      type uint32;
      description
        "Specifies the number of follow-up messages transmitted";
    }
    leaf signaling-msg-rx {
      if-feature "srl_nokia-feat:sync-ptp-ip-peers";
      type uint32;
      description
        "Specifies the number of follow-up messages received";
    }
    leaf other-rx {
      type uint32;
      description
        "Specifies the number of other messages received";
    }
    container discards {
      description 
        "Aggregate discard statistics for the PTP clock";
      leaf bad-domain {
        type uint32;
        description
          "Specifies the number of bad domain messages that were discarded";
      }
      leaf alternate-master {
        type uint32;
        description
          "Specifies the number of alternate master messages that were discarded";
      }  
      leaf out-of-sequence {
        type uint32;
        description
          "Specifies the number of out of sequence messages that were discarded";
      }  
      leaf peer-disabled {
        if-feature "srl_nokia-feat:sync-ptp-ip-peers";
        type uint32;
        description
          "Specifies the number of PTP messages that were discarded from disabled PTP peer

           Occurs when a PTP peer has been administratively disabled.";
      }
      leaf freerun {
        type uint32;
        description
          "Specifies the number of PTP messages discarded because the central clock was in free-run";
      }
 /*     leaf ptsf-unusable {
        type uint32;
        description
          "Specifies the number of PTP messages that were discarded due to the neighboring clock being considered unusable";
      }*/
      leaf other {
        type uint32;
        description
          "Specifies the number of other messages that were discarded";
      }
    }
  }
  grouping signaling-uni-neg-tlv-counts {
    list signaling-uni-neg-tlv {
      if-feature "srl_nokia-feat:sync-ptp-ip-peers";
      key "tlv-type message-type";
      description "Counts of different unicast negotiation TLVs";
      leaf tlv-type {
          type enumeration {
              enum "request"                      { value 1; }
              enum "grant"                        { value 2; }
              enum "reject"                       { value 3; }
              enum "cancel"                       { value 4; }
              enum "ack-cancel"                   { value 5; }
              enum "other"                        { value 6; }
          }
          description "Specifies the tlv type";
      }
      leaf message-type {
          type enumeration {
              enum "announce"                     { value 1; }
              enum "sync"                         { value 2; }
              enum "delay-response"               { value 3; }
              enum "other"                        { value 4; }
          }
          description "Specifies the message type";
      }
      leaf count {
          type srl_nokia-comm:zero-based-counter64;
          description "The count of the TLVs for the given tlv-type and message-type";
        }
    } 
  }

  grouping ptp-message-rates {
    leaf anno-msg-rate-tx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of announce messages transmitted";
    } 
    leaf anno-msg-rate-rx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of announce messages received";
    }
    leaf sync-msg-rate-tx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of sync messages transmitted";
    }
    leaf sync-msg-rate-rx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of sync messages received";
    }
    leaf del-req-msg-rate-tx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of delay-req messages transmitted";
    }
    leaf del-req-msg-rate-rx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of delay-req messages received";
    }
    leaf del-resp-msg-rate-tx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of delay-resp messages transmitted";
    }
    leaf del-resp-msg-rate-rx {
      units "messages-per-second";
      type decimal64 {
        fraction-digits 1;
      }
      description
        "Specifies the rate of messages of delay-resp messages received";
    }
    leaf follow-up-msg-rate-tx {
        type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of follow-up messages transmitted";
    }
    leaf follow-up-msg-rate-rx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of follow-up messages received";
    }
     leaf signaling-msg-rate-tx {
      if-feature "srl_nokia-feat:sync-ptp-ip-peers";
        type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of signaling messages transmitted";
    }
    leaf signaling-msg-rate-rx {
      if-feature "srl_nokia-feat:sync-ptp-ip-peers";
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of signaling messages received";
    }
   leaf other-rate-rx {
      type decimal64 {
        fraction-digits 1;
      }
      units "messages-per-second";
      description
        "Specifies the rate of messages of other messages received";
    }
  }
/*
  grouping announce-information {
    description
      "Grouping for information of announce message fields";
 
    reference
      "IEEE Std 1588-2008: 13.2 and 13.5";

    container source-port-identity {
      description
        "The sourcePortIdentity of the sender of the announce message
        
         It contains two members: clockIdentity and portNumber.";
      reference
        "IEEE Std 1588-2008: 5.3.5";
      leaf clock-identity {
        type srl_nokia-sync-types:clock-identity-type;
        config false;
        description
        "The clockIdentity of the sender of the announce message";

      }
      leaf port-number {
        type uint16;
        config false;
        description
          "The portNumber of the sender of the announce message";
      }
    }
    container flags {
      description
        "Value of the flag fields";
      reference
        "IEEE Std 1588-2008: 13.3.2.6";
      leaf alternate-master-flag {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf two-step-flag {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf unicast-flag {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf ptp-profile-specific-1-flag {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf ptp-profile-specific-2-flag {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf leap61 {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf leap59 {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf current-utc-offset-valid {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf ptp-timescale {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf time-traceable {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf frequency-traceable {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
      leaf synchronization-uncertain {
        type boolean;
        description
          "Value of the parameter from the Announce message";
      }
    }
    leaf current-utc-offset {
      type int16;
      description
        "Value of the parameter from the Announce message";
    }
    leaf grandmaster-identity {
      type srl_nokia-sync-types:clock-identity-type;
      config false;
      description
        "Value of the parameter from the Announce message";
    }
    container grandmaster-clock-quality {
      description
        "Value of the parameter from the Announce message";
      config false;
      uses clock-quality-grouping;
    }
    leaf grandmaster-priority1 {
      type uint8;
      config false;
      description
        "Value of the parameter from the Announce message";
    }
    leaf grandmaster-priority2 {
      type uint8;
      config false;
      description
        "Value of the parameter from the Announce message";
    }
    leaf steps-removed {
      type uint8;
      description
        "Value of the parameter from the Announce message";
    }
    leaf time-source {
      type enumeration {
        enum "atomic-clock"                 { value 16; }
        enum "gps"                          { value 32; }
        enum "terrestrial-radio"            { value 48; }
        enum "ptp"                          { value 64; }
        enum "ntp"                          { value 80; }
        enum "hand-set"                     { value 96; }
        enum "other"                        { value 144; }
        enum "internal-oscillator"          { value 160; }
        enum "reserved"                     { value 255; }
      }
      description 
        "Value of the parameter from the Announce message";
    }
  }
*/

  grouping ptp-default-ds-top {
    description
      "Grouping for ptp default data set configuration";
    container default-ds {
      description
        "The default data set of the PTP instance

         In the context of the protocol, this data set is required
         for an Ordinary Clock or Boundary Clock";

      leaf instance-type {
        default bc;
        type enumeration {
          /*
          enum oc {
            value 0;
            description "Ordinary clock ";
          }
          */
          enum bc {
            value 5;
            description "boundary clock";
          }
        }
        description
          "The type of PTP instance as per IEEE1588 standard
          
          For G.8275.1: 
            oc is for T-GM, 
            bc is for T-BC; 
            T-TSC not supported since T-BC can be used for this role
          For G.8275.2: 
            oc is for T-GM, 
            bc is for T-BC-A and T-BC-P; 
            T-TSC-A and T-TSC-P are not suported since T-BC-A or T-BC-P can be used for this role";
      } 
      leaf instance-enable {
        type boolean;
        default false;
        description
          "Enable PTP clock";
      }     
      leaf clock-identity {
        type srl_nokia-sync-types:clock-identity-type;
        config false;
        description
          "The clockIdentity of the local clock";
      }
      leaf number-ports {
        type uint16;
        description
          "The number of PTP ports on the instance";
        config false;
      }
      container clock-quality {
        description
          "The clockQuality of the local clock";
        config false;
        uses clock-quality-grouping;
      }
      leaf priority1 {
        type uint8 {
          range "0..255";
        }
        default 128;
        description
          "The IEEE Std 1588 priority1 of the PTP instance

           Since priority1 is one of the first comparisons
           performed by the Best Master Clock Algorithm (BMCA).
           Range is 0-255.";
      }
      leaf priority2 {
        type uint8 {
          range "0..255";
        }
        default 128;
        description
          "The IEEE Std 1588 priority2 of the PTP instance

           The priority2 member is compared by the Best Master
           Clock Algorithm (BMCA) after priority1 and clockQuality.
           Lower values take precedence.";
      }
      leaf domain-number {
        type uint8 {
          range "0..255";
        }
        description
          "The IEEE Std 1588 domainNumber of the PTP instance

           A domain consists of one or more PTP instances
           communicating with each other as defined by the
           protocol. A domain shall define the scope of PTP message
           communication, state, operations, data sets, and
           timescale. Therefore, each domain represents a distinct
           time.
           The default domain number is defined by the profile.
              itug8275dot1: 24
              itug8275dot2: 44";
      }
      leaf log-announce-interval {
        type int8 {
          range "-3..4";
        }
        description
          "The base-2 logarithm of the mean announceInterval 

           This is the mean time interval between successive Announce messages.
           The default log announce interval is defined by the profile.
              itug8275dot1: -3 (8 messages per second)
              itug8275dot2: 1 (1 message every two seconds)";
      }
      leaf announce-receipt-timeout {
        type uint8 {
          range "2..10";
        }
        default "3";
        description
          "Sets the time limit for missed Announce packets before the master clock is deemed down

           This command configures the announceReceiptTimeout value for all peer associations. 
           This defines the number of Announce message intervals that must expire with no received 
           Announce messages before declaring an ANNOUNCE_RECEIPT_TIMEOUT event.";
      }
/*      leaf slave-only {
        type boolean;
        default false;
        config false;
        description
          "The value of slave-only shall be true if the PTP instance is a slave-only PTP instance";
      } */
      container current-time {
        description
          "The current time in the current data set";
        config false;
        uses ptp-time-grouping;
      }
      leaf local-priority {
        type uint8 {
          range "1..255";
        }
        default "128";
        description
          "The IEEE Std 1588 priority2 of the PTP instance

           The priority2 member is compared by the Best Master
           Clock Algorithm (BMCA) after priority1 and clockQuality.
           Lower values take precedence.";
      }
      leaf two-step-flag {
        type boolean;
        config false;
        description
          "Indicates if the clock is operating in two-step mode";
      }
/*      leaf sync-uncertain-enable {
        type boolean;
        default false;
        description
          "Indicate if the synchronization uncertain monitoring is enabled or not";
      } */
      container statistics {
        config false;
        description "Aggregate statistics for the PTP clock";
        uses ptp-message-counts;
        uses signaling-uni-neg-tlv-counts;
        container unicast-message-rates {
          if-feature "srl_nokia-feat:sync-ptp-ip-peers";
          description 
            "Aggregate unicast message rates for the PTP clock";

          uses ptp-message-rates;
        } 
        container multicast-msg-rate {
          description          
            "Aggregate multicast message rates for the PTP clock";
          uses ptp-message-rates;
        }
      }
      container time-recovery-engine {
        config false;
        leaf algorithm-state {
          type enumeration {
            enum not-applicable {value 0; description "Not applicable to time recovery";}
            enum initial {value 1; description "Initiatizing state";}
            enum acquiring {value 2; description "Acquiring state"; }
            enum holdover {value 3;  description  "Holdover state";}
            enum locked {value 4; description "Locked state";}
          }
          description
            "Specifies the current state of the time recovery engine in the PTP clock";
        }
        leaf state-last-changed {
          type srl_nokia-comm:date-and-time;
          description
            "Specifies the last occurrence of a ptp state change for the time recovery engine";
        }
        leaf last-adjustment {
          type int64;
          units "nanoseconds";
          description "Specifies the last adjustment in nanoseconds to the local time of the PTP clock";
        }
        leaf last-adjustment-timestamp {
          type srl_nokia-comm:date-and-time;
          description "The time when last-adjustment was last calculated";
        }
        container statistics {
          description          
            "Time recovery engine state statistics for the PTP clock";
          leaf time-in-initial {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Initializatizing state";
          }
          leaf time-in-acquiring {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Acquiring state";
          }
          leaf time-in-holdover {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Holdover state";
          }           
          leaf time-in-locked {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Locked state";
          } 
        }
/*        container events {
          leaf packet-loss {
            type uint32;
            description
              "TBD";
          }
          leaf excessive-packet-loss {
            type uint32;
            description
              "TBD";
          }
          leaf excessive-phase-shift {
            type uint32;
            description
              "TBD";
          }
          leaf too-much-pdv {
            type uint32;
            description
              "TBD";
          }
        }
*/
      }      
      container freq-recovery-engine {
        if-feature "srl_nokia-feat:sync-ptp-freq";
        config false;
        leaf recovery-state {
          type enumeration {
            enum not-applicable {value 0; description "Not applicable to time recovery";}
            enum initial {value 1; description "Initiatizing state";}
            enum acquiring {value 2; description "Acquiring state"; }
            enum phase-tracking {value 3; description "Phase Tracking state";}         
            enum holdover {value 4;  description  "Holdover state";}
            enum locked {value 5; description "Locked state";}
          }
          description
            "Specifies the current state of the time recovery engine in the PTP clock";
        }
        leaf state-last-changed { // not sure if there is a freq clock equivalent
          type srl_nokia-comm:date-and-time;            
          description
            "Specifies the last occurrence of a ptp state change for the time recovery engine";
        }
        leaf frequency-offset {
          type decimal64 {
            fraction-digits 3;
          }
          units parts-per-billion;
            description
              "The frequency offset of the recovered PTP clock 

               Positive values indicate that the recovered clock is faster than nominal, 
               negative values indicate that the recovered clock is slower than nominal.";
        }
        leaf last-adjustment-timestamp {
            type srl_nokia-comm:date-and-time;  
            description "The time when last-adjustment was last calculated";
        }
        container statistics {
          description          
            "Freq recovery engine state statistics for the PTP clock";
          leaf time-in-initial {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Initializatizing state";
          }
          leaf time-in-acquiring {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Acquring state";
          }
          leaf time-in-phase-tracking {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Phase Tracking state";
          }
          leaf time-in-holdover {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Holdover state";
          }           
          leaf time-in-locked {
            type uint32;
            units seconds;
            description
              "Specifies the number of seconds while in Locked state";
          } 
        }
      }
      container events {
        config false;
        leaf sync-packet-loss {
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with detected packet loss of sync packets from the master clock";
        }
        leaf sync-high-packet-loss-freq {
          if-feature "srl_nokia-feat:sync-ptp-freq";
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with high packet loss of sync packets for frequency recovery";
        }
        leaf sync-high-phase-shift-freq {
          if-feature "srl_nokia-feat:sync-ptp-freq";
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with large clock shift from sync packets for frequency recovery";
        }
        leaf sync-too-much-pdv-freq {
          if-feature "srl_nokia-feat:sync-ptp-freq";
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with high PDV for sync packets for frequency recovery";
        }
        leaf delay-packet-loss {
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with detected packet loss for the delay request/response packets";
        }
        leaf delay-high-packet-loss-freq {
          if-feature "srl_nokia-feat:sync-ptp-freq";
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with high packet loss for delay req packets for frequency recovery";
        }
        leaf delay-high-phase-shift-freq {
          if-feature "srl_nokia-feat:sync-ptp-freq";
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with large clock shift for delay req packets for frequency recovery";
        }
        leaf delay-too-much-pdv-freq {
          if-feature "srl_nokia-feat:sync-ptp-freq";
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with high PDV for delay req packets for frequency recovery";
        }
        leaf sync-too-much-pdv-time {
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with high PDV for sync packets for time recovery";
        }
        leaf delay-too-much-pdv-time {
          type srl_nokia-comm:zero-based-counter32;
          description
            "The number of events with high PDV for delay request/response packets for time recovery";
        }
      }
    } 
  }
  
  grouping ptp-current-ds-top {
    container current-ds {
      description
        "Provides current data from operation of the protocol";
      config false;
      leaf steps-removed {
        type uint16;
        config false;
        description
          "The number of PTP clock steps in the path between the this PTP instance and the GM";
      }
      leaf offset-from-master {
        type srl_nokia-sync-types:time-interval-type;
        config false;
        description
          "The time difference between this PTP instance and the master clock";

      }
      leaf mean-delay {
        type srl_nokia-sync-types:time-interval-type;
        config false;
        description
          "The mean propagation time between this PTP instance and the master clock";
      }
/*      leaf synchronization-uncertain {
        type boolean;
        config false;
        description
              "The current synchronization-uncertain status of the local PTP clock";
      } */
    }
  }

  grouping ptp-parent-ds-top {
    description
      "Grouping for ptp parent data set configuration";
    container parent-ds {
      description
        "The parent data set of the clock";
      reference
        "IEEE Std 1588-2008: 8.2.3";
      config false;
      container parent-port-identity {
        description
          "The portIdentity of the port on the master";
        reference
          "IEEE Std 1588-2008: 5.3.5";
        config false;
        leaf clock-identity {
          type srl_nokia-sync-types:clock-identity-type;
          config false;
          description
            "Identity of the parent clock";
        }
        leaf port-number {
          type uint16;
          config false;
          description
           "Port number of the parent clock";
        }
      }
/*      leaf parent-stats {
        type boolean;
        default false;
        config false;
        description
              "Indicates if parent statistics are valid

               When set to true, the values of
               observedParentOffsetScaledLogVariance and
               observedParentClockPhaseChangeRate of parentDS
               have been measured and are valid.";
      }
      leaf observed-parent-offset-scaled-log-variance {
        type uint16;
        default "65535";
        config false;
        description
          "An estimate of the parent clock's PTP variance as observed by the slave clock";
      }
      leaf observed-parent-clock-phase-change-rate {
        type int32;
        config false;
        description
          "An estimate of the parent clock's phase change rate as observed by the slave clock";
      } */
      leaf grandmaster-identity {
        type srl_nokia-sync-types:clock-identity-type;
        config false;
        description
          "The clockIdentity of the grandmaster clock";
      }
      container grandmaster-clock-quality {
        description
          "The clockQuality of the grandmaster clock";
        config false;
        uses clock-quality-grouping;
      }
      leaf grandmaster-priority1 {
        type uint8;
        config false;
        description
          "The priority1 attribute of the grandmaster clock";
      }
      leaf grandmaster-priority2 {
        type uint8;
        config false;
        description
          "The priority2 attribute of the grandmaster clock";
      }
      container protocol-address {
        config false;
        description
          "The protocol address of the PTP Port that issues the Sync messages";
        uses port-address;
      }
/*      leaf synchronization-uncertain {
        type boolean;
        config false;
        description
          "This boolean is true when synchronization uncertain is received from the Parent PTP port";
      } */
    }
  }

  grouping ptp-time-ds-top {
    description
      "Grouping for ptp data set configuration";
    container time-properties-ds {
      description
        "The timeProperties data set of the clock";
      reference
        "IEEE Std 1588-2008: 8.2.4";
      config false;
      leaf current-utc-offset-valid {
        type boolean;
        config false;
        description
           "When set to true, the current UTC offset is valid";
      }
      leaf current-utc-offset {
        when "../current-utc-offset-valid='true'";
        type int16;
        config false;
        description
              "The offset between TAI and UTC 

               Only applies when the epoch of the PTP system is the PTP epoch in units of seconds
               (i.e. when ptp-timescale is TRUE). Otherwise, the value has no meaning.";
      }
      leaf leap59 {
        type boolean;
        config false;
        description
              "If true, the last minute of the current UTC day contains 59 seconds";
      }
      leaf leap61 {
        type boolean;
        config false;
        description
              "If true, the last minute of the current UTC day contains 61 seconds";
      }
      leaf time-traceable {
        type boolean;
        config false;
        description
              "If true, the timescale and the currentUtcOffset are traceable to a primary reference";
      }
      leaf frequency-traceable {
        type boolean;
        config false;
        description
              "If true, the frequency determining the timescale is traceable to a primary reference";
      }   
      leaf ptp-timescale {
        type boolean;
        config false;
        description
              "If true clock timescale of the grandmaster is PTP; false it is ARB (arbitrary)";
      }
      leaf time-source {
        type enumeration {
          enum "atomic-clock"                 { value 16; }
          enum "gps"                          { value 32; }
          enum "terrestrial-radio"            { value 48; }
          enum "ptp"                          { value 64; }
          enum "ntp"                          { value 80; }
          enum "hand-set"                     { value 96; }
          enum "other"                        { value 144; }
          enum "internal-oscillator"          { value 160; }
        /*  enum "240"                          { value 240; }
          enum "241"                          { value 241; }
          enum "242"                          { value 242; }
          enum "243"                          { value 243; }
          enum "244"                          { value 244; }
          enum "245"                          { value 245; }
          enum "246"                          { value 246; }
          enum "247"                          { value 247; }
          enum "248"                          { value 248; }
          enum "249"                          { value 249; }
          enum "250"                          { value 250; }
          enum "251"                          { value 251; }
          enum "252"                          { value 252; }
          enum "253"                          { value 253; }
          enum "254"                          { value 254; } */
          enum "reserved"                     { value 255; }
        }
        config false;
        description 
          "The source of time used by the grandmaster clock";
      }
    }
  }

  grouping ptp-port-ds-top {
    description
      "Grouping for ptp port data set configuration";

    list port-ds-list {
      key "port-number";
      description
        "List of port data sets of the clock";
      reference
          "IEEE Std 1588-2008: 8.2.5";
      leaf port-number {
        type uint16 {
            range "1..1500";
        }
        description
          "Port number as per IEEE Std 1588

           The data sets (i.e., information model) of IEEE Std
           1588-2008 specify a member portDS.portIdentity, which
           uses a typed struct with members clockIdentity and
           portNumber.

           In this YANG data model, portIdentity is not modeled
           in the port-ds.  However, its members are provided
           as follows:
           portIdentity.portNumber is provided as this
           port-number leaf in port-ds, and
           portIdentity.clockIdentity is provided as the
           clock-identity leaf in default-ds of the instance
           (i.e., ../../default-ds/clock-identity).";
      }
      leaf dynamic {
        config false;
        type boolean;
        description
          "Indicates if this port was dynamically created by a Unicast Request

           TRUE if this port was created based on a received Unicast Request;
           FALSE if this port was created by operator configuration.";
      }
      leaf admin-state {
        type srl_nokia-comm:admin-state;
        default "disable";
        description
          "The administrative state of the ptp port";
      }
      leaf port-state {
        type srl_nokia-sync-types:port-state;
        config false;
        description
          "Current state associated with the port";
      }
      container underlying-transport {
        /*leaf communication-path {
          type identityref {
            base network-protocol;
          }
        }*/
        leaf ethernet-port {
          must 'not (../peer/host or ../peer/network-instance)'  {
            error-message "only one of ethernet-port and peer may be configured";
          }
          type srl_nokia-comm:interface-ptp;
          description
            "Local interface used for ptp over ethernet communication";
        }
        container peer {
          if-feature "srl_nokia-feat:sync-ptp-ip-peers";
          leaf network-instance {
            must 'not (../../ethernet-port)' {
                error-message "only one of ethernet-port and peer may be configured";
            }
            type leafref {
              path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
            }
            description
              "Network instance that owns the PTP peer";
          }
          leaf host {
            must 'not (../../ethernet-port)' {
                error-message "only one of ethernet-port and peer may be configured";
            }
            type srl_nokia-comm:host;
            description
              "IP address or DNS domain name for the PTP peer";
          }
        }
      }
      leaf best-master {
        config false;
        type boolean;
        description "Indicates if this peer was selected by the BMCA to be the best master";
      }
      leaf parent-clock {
        config false;
        type boolean;
        description
          "Indicates if this peer is the current parent clock of this PTP clock

           May differ from best-master due to use of local GNSS as time source.";
      }
      leaf log-min-delay-req-interval {
        type int8{
          range "-6..0";
        }
        description
          "The base-2 logarithm of the minDelayReqInterval

           The minimum permitted mean time interval between successive Delay_Req messages.
           The default log-min-delay-req-interval is defined by the profile.
              itug8275dot1: -4 (16 messages per second)
              itug8275dot2: -6 (64 messages per second)";
      }   
      leaf log-announce-interval {
        type int8 {
          range "-3..4";
        }
        config false;
        description
          "The base-2 logarithm of the mean announceInterval 

           Mean time interval between successive Announce messages. To change this setting, 
           refer to log-announce-interval in the Default data set.";
      }
      leaf announce-receipt-timeout {
        type uint8 {
          range "2..10";
      }
        config false;
        description
          "Sets the time limit for missed Announce packets before the master clock is deemed down

           This command configures the announceReceiptTimeout value for all peer associations. 
           This defines the number of Announce message intervals that must expire with no received 
           Announce messages before declaring an ANNOUNCE_RECEIPT_TIMEOUT event. To change this 
           setting, refer to announce-receipt-timeout in the Default data set.";
      }
      leaf log-sync-interval {
        type int8 {
          range "-6..0";
        }
        description
          "The base-2 logarithm of the mean SyncInterval for multicast messages

           The default log sync interval is defined by the profile.
              itug8275dot1: -4 (16 messages per second)
              itug8275dot2: -6 (64 messages per second)
           The rates for unicast transmissions are negotiated separately on a per-port
           basis and are not constrained by this attribute.";
      }  
      leaf major-version-number {
        type uint8;
        config false;
        description
          "The PTP major version number in use on the port";
      }
      leaf minor-version-number {
        type uint8;
        config false;
        description
          "The PTP minor version number in use on the port";
      }
      leaf local-priority {
        type uint8 {
          range "1..255";
        }
        default "128";
        description
          "Specifies the local priority of the ptp port";
      }
      leaf master-only {
        type boolean;
        default true;
        description
          "Specifies the masterOnly attribute of the ptp port";
      }      
      leaf asym-correction {
        type int32 {
          range "-100000000..100000000";
        }
        config false;
        units nanoseconds;
        description
          "Specifies the asymmetry correction value (integer ns) currently used

           Configuration of an asymmetry correction value is done under interface>ethernet";
      }
/*
      leaf encap-type {
        type enumeration {
          enum ethernet {
            value 0;
          description
            "The clock uses Ethernet (IEEE Std 802.3) encapsulation";
          }
        }
        default "ethernet";
        config false;
        description
          "Encapsulation type used for ptp on this port";
      }
*/
      leaf dest-mac {
        type enumeration {      
          enum forwardable {
            value 0;
          description
            "The clock uses the forwardable MAC address: 01-1B-19-00-00-00";
          }
          enum non-forwardable {
            value 1;
          description
            "The clock uses the non-forwardable MAC address: 01-80-C2-00-00-0E";
          }
        }
        default "forwardable";
        description
          "Configure the MAC address associated with forwardable or non-forwardable";
      }
      container statistics {
        config false;
        description          
          "Total messages for a specific PTP port";        
        uses ptp-message-counts;
        uses signaling-uni-neg-tlv-counts;
      }
      leaf neighbor-count {
        type uint32;
         config false;
        description
          "The number of neigbors for the port";
      }
      list neighbor-list {
        key "clock-identity port-number";
        config false;
        description
          "List of MAC address of all the neighbors of this port";      
      
        leaf clock-identity {
          type srl_nokia-sync-types:clock-identity-type;
          config false;
          description
            "The clockIdentity of this neigbor clock";
        }
        leaf port-number {
          type uint16;
          description
            "The port number of this neigbor clock";
          config false;
        }
        leaf mac-address {
          type srl_nokia-comm:mac-address;
          description
            "Specifies the MAC address of this neighbor";
        }
        leaf rx-message-rate {
          type decimal64 {
            fraction-digits 1;
          }
          units "messages-per-second";
          description
            "The receive message rate from this neigbor clock";
          config false;
        }
/*        container last-received-announce-message {
          description
            "Contents of the last received announce message from this neighbor";
          leaf last-receive-time {
            type srl_nokia-comm:date-and-time;  
            description "The time when the last set of announce message information was received";
          }  
          uses announce-information;
        } 
*/
/*        leaf er-best {
          type boolean;
          description
            "This neighbor is the source of ErBest for the PTP port";
        } 
*/
      }
/*
      container er-best {
        config false;
        description
          "ErBest for this PTP port from the last computation of the BMCA";
        uses announce-information;
      }
*/ 
    }
  }
  grouping ptp-network-instance-top {
    list network-instances {
      if-feature "srl_nokia-feat:sync-ptp-ip-peers";
      key "network-instance";
      description "Per network instance PTP configuration and state";

      leaf network-instance {
        type leafref {
          path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
        }
        description
          "Network instance that owns the PTP peer";
      }
      leaf peer-limit {
          type int32 {
              range "0..512";
          }
          description 
            "Number of discovered peers allowed for network-instance

             If not defined then the number is not restricted within this network-instance.";
      }
      leaf admin-state {
        type srl_nokia-comm:admin-state;
        default "enable";
        description "Administrative state of PTP on the network-instance";
      }
       leaf oper-state {
        config false;
        type srl_nokia-comm:oper-state;
        description "Operational state of PTP within the network instance";
      }
   }
  }
  grouping ptp-unicast-negotiation-session-top {
    description
      "Grouping for ptp unicast session information";

    list unicast-negotiation-session {
      if-feature "srl_nokia-feat:sync-ptp-ip-peers";
      key "clock-identity port-number";
      config false;
      description
        "List of unicast session known by this clock";      
    
      leaf clock-identity {
        type srl_nokia-sync-types:clock-identity-type;
        description
          "The clockIdentity of the external clock";
      }
      leaf port-number {
        type uint16;
        description
          "The port number of the external clock";
      }
      container transport-address {
        /* leaf communication-path {
          type identityref {
            base network-protocol;
          }
        }*/
        leaf port {
           type srl_nokia-comm:interface-name;
          description
            "local interface used for ptp over ethernet communication";
        }
        container peer {
          leaf network-instance {
            type leafref {
              path "/srl_nokia-netinst:network-instance/srl_nokia-netinst:name";
            }
            description
              "Network instance that owns the PTP peer";
          }
          leaf host {
            type srl_nokia-comm:host;
            description
              "IP address of DNS domain name for the PTP peer";
          }
        }
      }
      list session {
        key "direction message-type";
        description 
          "Details of each negotiation session";

        leaf direction {
            type enumeration {
                enum "rx"                           { value 1; }
                enum "tx"                           { value 2; }
            }
            description 
              "Specifies the direction of the negotiated session";
        }
        leaf message-type {
            type enumeration {
                enum "announce"                     { value 1; }
                enum "sync"                         { value 2; }
                enum "delay-response"               { value 3; }
            }
            description 
              "Specifies the message type of the negotiated session";
        }
        leaf state {
            type enumeration {
                enum "pending"                      { value 1; }
                enum "granted"                      { value 2; }
                enum "denied"                       { value 3; }
                enum "expired"                      { value 4; }
                enum "canceled"                     { value 5; }
            }
            description   
              "Indicates the state of the negotiation";
        }
        leaf log-interval {
            type int8;
            description 
              "The packet rate requested or granted for unicast transmission between the PTP peers";
        }
        leaf duration {
            type uint32;
            units "seconds";
            description "The duration, in seconds, requested/granted for unicast transmission between the PTP peers";
        }
        leaf time-of-last-grant {
            type srl_nokia-comm:date-and-time;
            description "The time when status last changed or the unicast session between the PTP clocks was renewed";
        }
      }
    }
  }
  grouping ptp-instance-top {
    description
      "The PTP struct containing all attributes of PTP data set";
    leaf ptp-profile {
      type enumeration {
      //  enum ieee1588 {value 0; description "IEEE1588-2008 Default Profile";}
        enum itug8275dot1 {value 1; description "ITU-T G.8275.1 (2014) Profile";}
        enum itug8275dot2 {value 2; description "ITU-T G.8275.2 Profile";}
      //  enum itug8265dot1 {value 3; description "ITU-T G.8265.1 Profile";}
      }        
      default "itug8275dot1";
      description
        "Specifies the PTP profile mode for the PTP clock";
    }
    list instance {
      key "instance-index";
    //  config false;
      description
        "List of one or more PTP instances in the product (PTP Node)

         Each PTP instance represents a distinct instance of PTP
         implementation (i.e. distinct Ordinary Clock, Boundary Clock,
         or Transparent Clock), maintaining a distinct time.";      
    
      leaf instance-index {
        type uint32 {
          range "1..2";
        } // only 1 instance supported
        description
          "The instance index of the current PTP instance

           This instance index is used for management purposes
           only.  This instance index does not represent the PTP
           domain number and is not used in PTP messages.";
      }

      uses ptp-default-ds-top;
      uses ptp-current-ds-top;
      uses ptp-parent-ds-top;
      uses ptp-time-ds-top;
      uses ptp-port-ds-top;
      uses ptp-network-instance-top;
      uses ptp-unicast-negotiation-session-top;
    }
  }
}
